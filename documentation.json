{
    "pipes": [],
    "interfaces": [
        {
            "name": "Animal",
            "id": "interface-Animal-b3b67a1cac45119024e077d1f5b6d7f1c506a2322d570d7278d283d46a80b9983823a695901abe715b169e19c99dac17157c4eda169d2fda59c6e7a970594680",
            "file": "src/app/input.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface Animal {\n  id: number;\n  type: string;\n  country: \"ca\" | \"us\";\n}\n\nconst animals: Animal[] = [\n  { id: 1, type: \"dog\", country: \"ca\"},\n  { id: 2, type: \"cat\", country: \"us\"},\n  { id: 3, type: \"bird\", country: \"ca\"},\n];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InputService {\n\n  public animals$ = new BehaviorSubject<Animal[]>(animals);\n\n  constructor() { }\n\n  getAnimals() {\n    return this.animals$;\n  }\n\n  addAnimal(val: string) {\n    const current = this.animals$.getValue();\n    \n    this.animals$.next([{\n      id: current.length + 1,\n      type: val,\n      country: \"us\",\n    }, ...current]);\n  }\n}\n",
            "properties": [
                {
                    "name": "country",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"ca\" | \"us\"",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Animation",
            "id": "interface-Animation-605ea3816cfa35446be3168714a9b52f8c3244b7d7d932d869c7fa1c9b9a20b615e20ab8b844b8654294467eca8a9e95d924c7b9754919dbef083c50a45ad0ce",
            "file": "src/app/carousel/carousel/carousel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export class CarouselStore {\n  constructor(\n    public touch = new Touch(),\n    public vertical = new Vertical(),\n    public interval?: CarouselInterval,\n    public transform = new Transfrom(),\n    public button?: CarouselButton,\n    public visibleItems?: ItemsControl,\n    public deviceType?: DeviceType,\n    public type = 'fixed',\n    public token = '',\n    public items = 0,\n    public load = 0,\n    public deviceWidth = 0,\n    public carouselWidth = 0,\n    public itemWidth = 0,\n    public slideItems = 0,\n    public itemWidthPer = 0,\n    public itemLength = 0,\n    public currentSlide = 0,\n    public easing = 'cubic-bezier(0, 0, 0.2, 1)',\n    public speed = 200,\n    public loop = false,\n    public dexVal = 0,\n    public touchTransform = 0,\n    public isEnd = false,\n    public isFirst = true,\n    public isLast = false,\n    public RTL = false,\n    public point = true,\n    public velocity = 1,\n    public showPagination = true,\n    public showNavigation = true,\n  ) {}\n}\nexport type DeviceType = 'xs' | 'sm' | 'md' | 'lg' | 'all';\n\nexport type ButtonVisible = 'disabled' | 'hide';\n\nexport class ItemsControl {\n  start: number;\n  end: number;\n}\n\nexport class Vertical {\n  enabled: boolean;\n  height: number;\n  // numHeight?: number;\n}\n\nexport class CarouselButton {\n  visibility?: ButtonVisible;\n  elastic?: number;\n}\n\nexport class Touch {\n  active?: boolean;\n  swipe: string;\n  velocity: number;\n}\n\nexport class Transfrom {\n  constructor(public xs = 0, public sm = 0, public md = 0, public lg = 0, public all = 0) {}\n}\n\nexport class CarouselConfig {\n  grid: Transfrom;\n  slide?: number;\n  speed?: number;\n  interval?: CarouselInterval;\n  animation?: Animate;\n  point?: Point;\n  type?: string;\n  load?: number;\n  custom?: Custom;\n  loop?: boolean;\n  touch?: boolean;\n  easing?: string;\n  RTL?: boolean;\n  button?: CarouselButton;\n  vertical?: Vertical;\n  velocity?: number;\n  showNavigation?: boolean;\n  showPagination?: boolean;\n}\n\nexport type Custom = 'banner';\nexport type Animate = 'lazy';\n\nexport interface Point {\n  visible: boolean;\n  hideOnSingleSlide?: boolean;\n}\n\nexport interface Animation {\n  type?: Animate;\n  animateStyles?: AnimationStyles;\n}\n\nexport interface AnimationStyles {\n  style?: string;\n  open?: string;\n  close?: string;\n  stagger?: number;\n}\n\nexport interface CarouselInterval {\n  timing: number;\n  initialDelay?: number;\n}\n\nexport class CarouselOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n",
            "properties": [
                {
                    "name": "animateStyles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AnimationStyles",
                    "optional": true,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Animate",
                    "optional": true,
                    "description": "",
                    "line": 96
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AnimationStyles",
            "id": "interface-AnimationStyles-605ea3816cfa35446be3168714a9b52f8c3244b7d7d932d869c7fa1c9b9a20b615e20ab8b844b8654294467eca8a9e95d924c7b9754919dbef083c50a45ad0ce",
            "file": "src/app/carousel/carousel/carousel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export class CarouselStore {\n  constructor(\n    public touch = new Touch(),\n    public vertical = new Vertical(),\n    public interval?: CarouselInterval,\n    public transform = new Transfrom(),\n    public button?: CarouselButton,\n    public visibleItems?: ItemsControl,\n    public deviceType?: DeviceType,\n    public type = 'fixed',\n    public token = '',\n    public items = 0,\n    public load = 0,\n    public deviceWidth = 0,\n    public carouselWidth = 0,\n    public itemWidth = 0,\n    public slideItems = 0,\n    public itemWidthPer = 0,\n    public itemLength = 0,\n    public currentSlide = 0,\n    public easing = 'cubic-bezier(0, 0, 0.2, 1)',\n    public speed = 200,\n    public loop = false,\n    public dexVal = 0,\n    public touchTransform = 0,\n    public isEnd = false,\n    public isFirst = true,\n    public isLast = false,\n    public RTL = false,\n    public point = true,\n    public velocity = 1,\n    public showPagination = true,\n    public showNavigation = true,\n  ) {}\n}\nexport type DeviceType = 'xs' | 'sm' | 'md' | 'lg' | 'all';\n\nexport type ButtonVisible = 'disabled' | 'hide';\n\nexport class ItemsControl {\n  start: number;\n  end: number;\n}\n\nexport class Vertical {\n  enabled: boolean;\n  height: number;\n  // numHeight?: number;\n}\n\nexport class CarouselButton {\n  visibility?: ButtonVisible;\n  elastic?: number;\n}\n\nexport class Touch {\n  active?: boolean;\n  swipe: string;\n  velocity: number;\n}\n\nexport class Transfrom {\n  constructor(public xs = 0, public sm = 0, public md = 0, public lg = 0, public all = 0) {}\n}\n\nexport class CarouselConfig {\n  grid: Transfrom;\n  slide?: number;\n  speed?: number;\n  interval?: CarouselInterval;\n  animation?: Animate;\n  point?: Point;\n  type?: string;\n  load?: number;\n  custom?: Custom;\n  loop?: boolean;\n  touch?: boolean;\n  easing?: string;\n  RTL?: boolean;\n  button?: CarouselButton;\n  vertical?: Vertical;\n  velocity?: number;\n  showNavigation?: boolean;\n  showPagination?: boolean;\n}\n\nexport type Custom = 'banner';\nexport type Animate = 'lazy';\n\nexport interface Point {\n  visible: boolean;\n  hideOnSingleSlide?: boolean;\n}\n\nexport interface Animation {\n  type?: Animate;\n  animateStyles?: AnimationStyles;\n}\n\nexport interface AnimationStyles {\n  style?: string;\n  open?: string;\n  close?: string;\n  stagger?: number;\n}\n\nexport interface CarouselInterval {\n  timing: number;\n  initialDelay?: number;\n}\n\nexport class CarouselOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n",
            "properties": [
                {
                    "name": "close",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "open",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "stagger",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 101
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "CarouselInterval",
            "id": "interface-CarouselInterval-605ea3816cfa35446be3168714a9b52f8c3244b7d7d932d869c7fa1c9b9a20b615e20ab8b844b8654294467eca8a9e95d924c7b9754919dbef083c50a45ad0ce",
            "file": "src/app/carousel/carousel/carousel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export class CarouselStore {\n  constructor(\n    public touch = new Touch(),\n    public vertical = new Vertical(),\n    public interval?: CarouselInterval,\n    public transform = new Transfrom(),\n    public button?: CarouselButton,\n    public visibleItems?: ItemsControl,\n    public deviceType?: DeviceType,\n    public type = 'fixed',\n    public token = '',\n    public items = 0,\n    public load = 0,\n    public deviceWidth = 0,\n    public carouselWidth = 0,\n    public itemWidth = 0,\n    public slideItems = 0,\n    public itemWidthPer = 0,\n    public itemLength = 0,\n    public currentSlide = 0,\n    public easing = 'cubic-bezier(0, 0, 0.2, 1)',\n    public speed = 200,\n    public loop = false,\n    public dexVal = 0,\n    public touchTransform = 0,\n    public isEnd = false,\n    public isFirst = true,\n    public isLast = false,\n    public RTL = false,\n    public point = true,\n    public velocity = 1,\n    public showPagination = true,\n    public showNavigation = true,\n  ) {}\n}\nexport type DeviceType = 'xs' | 'sm' | 'md' | 'lg' | 'all';\n\nexport type ButtonVisible = 'disabled' | 'hide';\n\nexport class ItemsControl {\n  start: number;\n  end: number;\n}\n\nexport class Vertical {\n  enabled: boolean;\n  height: number;\n  // numHeight?: number;\n}\n\nexport class CarouselButton {\n  visibility?: ButtonVisible;\n  elastic?: number;\n}\n\nexport class Touch {\n  active?: boolean;\n  swipe: string;\n  velocity: number;\n}\n\nexport class Transfrom {\n  constructor(public xs = 0, public sm = 0, public md = 0, public lg = 0, public all = 0) {}\n}\n\nexport class CarouselConfig {\n  grid: Transfrom;\n  slide?: number;\n  speed?: number;\n  interval?: CarouselInterval;\n  animation?: Animate;\n  point?: Point;\n  type?: string;\n  load?: number;\n  custom?: Custom;\n  loop?: boolean;\n  touch?: boolean;\n  easing?: string;\n  RTL?: boolean;\n  button?: CarouselButton;\n  vertical?: Vertical;\n  velocity?: number;\n  showNavigation?: boolean;\n  showPagination?: boolean;\n}\n\nexport type Custom = 'banner';\nexport type Animate = 'lazy';\n\nexport interface Point {\n  visible: boolean;\n  hideOnSingleSlide?: boolean;\n}\n\nexport interface Animation {\n  type?: Animate;\n  animateStyles?: AnimationStyles;\n}\n\nexport interface AnimationStyles {\n  style?: string;\n  open?: string;\n  close?: string;\n  stagger?: number;\n}\n\nexport interface CarouselInterval {\n  timing: number;\n  initialDelay?: number;\n}\n\nexport class CarouselOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n",
            "properties": [
                {
                    "name": "initialDelay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "timing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 108
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Point",
            "id": "interface-Point-605ea3816cfa35446be3168714a9b52f8c3244b7d7d932d869c7fa1c9b9a20b615e20ab8b844b8654294467eca8a9e95d924c7b9754919dbef083c50a45ad0ce",
            "file": "src/app/carousel/carousel/carousel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export class CarouselStore {\n  constructor(\n    public touch = new Touch(),\n    public vertical = new Vertical(),\n    public interval?: CarouselInterval,\n    public transform = new Transfrom(),\n    public button?: CarouselButton,\n    public visibleItems?: ItemsControl,\n    public deviceType?: DeviceType,\n    public type = 'fixed',\n    public token = '',\n    public items = 0,\n    public load = 0,\n    public deviceWidth = 0,\n    public carouselWidth = 0,\n    public itemWidth = 0,\n    public slideItems = 0,\n    public itemWidthPer = 0,\n    public itemLength = 0,\n    public currentSlide = 0,\n    public easing = 'cubic-bezier(0, 0, 0.2, 1)',\n    public speed = 200,\n    public loop = false,\n    public dexVal = 0,\n    public touchTransform = 0,\n    public isEnd = false,\n    public isFirst = true,\n    public isLast = false,\n    public RTL = false,\n    public point = true,\n    public velocity = 1,\n    public showPagination = true,\n    public showNavigation = true,\n  ) {}\n}\nexport type DeviceType = 'xs' | 'sm' | 'md' | 'lg' | 'all';\n\nexport type ButtonVisible = 'disabled' | 'hide';\n\nexport class ItemsControl {\n  start: number;\n  end: number;\n}\n\nexport class Vertical {\n  enabled: boolean;\n  height: number;\n  // numHeight?: number;\n}\n\nexport class CarouselButton {\n  visibility?: ButtonVisible;\n  elastic?: number;\n}\n\nexport class Touch {\n  active?: boolean;\n  swipe: string;\n  velocity: number;\n}\n\nexport class Transfrom {\n  constructor(public xs = 0, public sm = 0, public md = 0, public lg = 0, public all = 0) {}\n}\n\nexport class CarouselConfig {\n  grid: Transfrom;\n  slide?: number;\n  speed?: number;\n  interval?: CarouselInterval;\n  animation?: Animate;\n  point?: Point;\n  type?: string;\n  load?: number;\n  custom?: Custom;\n  loop?: boolean;\n  touch?: boolean;\n  easing?: string;\n  RTL?: boolean;\n  button?: CarouselButton;\n  vertical?: Vertical;\n  velocity?: number;\n  showNavigation?: boolean;\n  showPagination?: boolean;\n}\n\nexport type Custom = 'banner';\nexport type Animate = 'lazy';\n\nexport interface Point {\n  visible: boolean;\n  hideOnSingleSlide?: boolean;\n}\n\nexport interface Animation {\n  type?: Animate;\n  animateStyles?: AnimationStyles;\n}\n\nexport interface AnimationStyles {\n  style?: string;\n  open?: string;\n  close?: string;\n  stagger?: number;\n}\n\nexport interface CarouselInterval {\n  timing: number;\n  initialDelay?: number;\n}\n\nexport class CarouselOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n",
            "properties": [
                {
                    "name": "hideOnSingleSlide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 91
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "InputService",
            "id": "injectable-InputService-b3b67a1cac45119024e077d1f5b6d7f1c506a2322d570d7278d283d46a80b9983823a695901abe715b169e19c99dac17157c4eda169d2fda59c6e7a970594680",
            "file": "src/app/input.service.ts",
            "properties": [
                {
                    "name": "animals$",
                    "defaultValue": "new BehaviorSubject<Animal[]>(animals)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addAnimal",
                    "args": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAnimals",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface Animal {\n  id: number;\n  type: string;\n  country: \"ca\" | \"us\";\n}\n\nconst animals: Animal[] = [\n  { id: 1, type: \"dog\", country: \"ca\"},\n  { id: 2, type: \"cat\", country: \"us\"},\n  { id: 3, type: \"bird\", country: \"ca\"},\n];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InputService {\n\n  public animals$ = new BehaviorSubject<Animal[]>(animals);\n\n  constructor() { }\n\n  getAnimals() {\n    return this.animals$;\n  }\n\n  addAnimal(val: string) {\n    const current = this.animals$.getValue();\n    \n    this.animals$.next([{\n      id: current.length + 1,\n      type: val,\n      country: \"us\",\n    }, ...current]);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-216456583e25428faed77a4328eb6552448b3ca5a60c594cca6093d48f5332766845debfe0c05c76cc89e95f1f958caf3ad9253a229c2cc3a570b8ec03f2b4c7",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CarouselButton",
            "id": "class-CarouselButton-605ea3816cfa35446be3168714a9b52f8c3244b7d7d932d869c7fa1c9b9a20b615e20ab8b844b8654294467eca8a9e95d924c7b9754919dbef083c50a45ad0ce",
            "file": "src/app/carousel/carousel/carousel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CarouselStore {\n  constructor(\n    public touch = new Touch(),\n    public vertical = new Vertical(),\n    public interval?: CarouselInterval,\n    public transform = new Transfrom(),\n    public button?: CarouselButton,\n    public visibleItems?: ItemsControl,\n    public deviceType?: DeviceType,\n    public type = 'fixed',\n    public token = '',\n    public items = 0,\n    public load = 0,\n    public deviceWidth = 0,\n    public carouselWidth = 0,\n    public itemWidth = 0,\n    public slideItems = 0,\n    public itemWidthPer = 0,\n    public itemLength = 0,\n    public currentSlide = 0,\n    public easing = 'cubic-bezier(0, 0, 0.2, 1)',\n    public speed = 200,\n    public loop = false,\n    public dexVal = 0,\n    public touchTransform = 0,\n    public isEnd = false,\n    public isFirst = true,\n    public isLast = false,\n    public RTL = false,\n    public point = true,\n    public velocity = 1,\n    public showPagination = true,\n    public showNavigation = true,\n  ) {}\n}\nexport type DeviceType = 'xs' | 'sm' | 'md' | 'lg' | 'all';\n\nexport type ButtonVisible = 'disabled' | 'hide';\n\nexport class ItemsControl {\n  start: number;\n  end: number;\n}\n\nexport class Vertical {\n  enabled: boolean;\n  height: number;\n  // numHeight?: number;\n}\n\nexport class CarouselButton {\n  visibility?: ButtonVisible;\n  elastic?: number;\n}\n\nexport class Touch {\n  active?: boolean;\n  swipe: string;\n  velocity: number;\n}\n\nexport class Transfrom {\n  constructor(public xs = 0, public sm = 0, public md = 0, public lg = 0, public all = 0) {}\n}\n\nexport class CarouselConfig {\n  grid: Transfrom;\n  slide?: number;\n  speed?: number;\n  interval?: CarouselInterval;\n  animation?: Animate;\n  point?: Point;\n  type?: string;\n  load?: number;\n  custom?: Custom;\n  loop?: boolean;\n  touch?: boolean;\n  easing?: string;\n  RTL?: boolean;\n  button?: CarouselButton;\n  vertical?: Vertical;\n  velocity?: number;\n  showNavigation?: boolean;\n  showPagination?: boolean;\n}\n\nexport type Custom = 'banner';\nexport type Animate = 'lazy';\n\nexport interface Point {\n  visible: boolean;\n  hideOnSingleSlide?: boolean;\n}\n\nexport interface Animation {\n  type?: Animate;\n  animateStyles?: AnimationStyles;\n}\n\nexport interface AnimationStyles {\n  style?: string;\n  open?: string;\n  close?: string;\n  stagger?: number;\n}\n\nexport interface CarouselInterval {\n  timing: number;\n  initialDelay?: number;\n}\n\nexport class CarouselOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n",
            "properties": [
                {
                    "name": "elastic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "visibility",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonVisible",
                    "optional": true,
                    "description": "",
                    "line": 52
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CarouselConfig",
            "id": "class-CarouselConfig-605ea3816cfa35446be3168714a9b52f8c3244b7d7d932d869c7fa1c9b9a20b615e20ab8b844b8654294467eca8a9e95d924c7b9754919dbef083c50a45ad0ce",
            "file": "src/app/carousel/carousel/carousel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CarouselStore {\n  constructor(\n    public touch = new Touch(),\n    public vertical = new Vertical(),\n    public interval?: CarouselInterval,\n    public transform = new Transfrom(),\n    public button?: CarouselButton,\n    public visibleItems?: ItemsControl,\n    public deviceType?: DeviceType,\n    public type = 'fixed',\n    public token = '',\n    public items = 0,\n    public load = 0,\n    public deviceWidth = 0,\n    public carouselWidth = 0,\n    public itemWidth = 0,\n    public slideItems = 0,\n    public itemWidthPer = 0,\n    public itemLength = 0,\n    public currentSlide = 0,\n    public easing = 'cubic-bezier(0, 0, 0.2, 1)',\n    public speed = 200,\n    public loop = false,\n    public dexVal = 0,\n    public touchTransform = 0,\n    public isEnd = false,\n    public isFirst = true,\n    public isLast = false,\n    public RTL = false,\n    public point = true,\n    public velocity = 1,\n    public showPagination = true,\n    public showNavigation = true,\n  ) {}\n}\nexport type DeviceType = 'xs' | 'sm' | 'md' | 'lg' | 'all';\n\nexport type ButtonVisible = 'disabled' | 'hide';\n\nexport class ItemsControl {\n  start: number;\n  end: number;\n}\n\nexport class Vertical {\n  enabled: boolean;\n  height: number;\n  // numHeight?: number;\n}\n\nexport class CarouselButton {\n  visibility?: ButtonVisible;\n  elastic?: number;\n}\n\nexport class Touch {\n  active?: boolean;\n  swipe: string;\n  velocity: number;\n}\n\nexport class Transfrom {\n  constructor(public xs = 0, public sm = 0, public md = 0, public lg = 0, public all = 0) {}\n}\n\nexport class CarouselConfig {\n  grid: Transfrom;\n  slide?: number;\n  speed?: number;\n  interval?: CarouselInterval;\n  animation?: Animate;\n  point?: Point;\n  type?: string;\n  load?: number;\n  custom?: Custom;\n  loop?: boolean;\n  touch?: boolean;\n  easing?: string;\n  RTL?: boolean;\n  button?: CarouselButton;\n  vertical?: Vertical;\n  velocity?: number;\n  showNavigation?: boolean;\n  showPagination?: boolean;\n}\n\nexport type Custom = 'banner';\nexport type Animate = 'lazy';\n\nexport interface Point {\n  visible: boolean;\n  hideOnSingleSlide?: boolean;\n}\n\nexport interface Animation {\n  type?: Animate;\n  animateStyles?: AnimationStyles;\n}\n\nexport interface AnimationStyles {\n  style?: string;\n  open?: string;\n  close?: string;\n  stagger?: number;\n}\n\nexport interface CarouselInterval {\n  timing: number;\n  initialDelay?: number;\n}\n\nexport class CarouselOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n",
            "properties": [
                {
                    "name": "animation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Animate",
                    "optional": true,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CarouselButton",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "custom",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Custom",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "easing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "grid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Transfrom",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "interval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CarouselInterval",
                    "optional": true,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "load",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "loop",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "point",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Point",
                    "optional": true,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "RTL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "showNavigation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "showPagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "slide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "speed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "touch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "velocity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "vertical",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Vertical",
                    "optional": true,
                    "description": "",
                    "line": 81
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CarouselOutletContext",
            "id": "class-CarouselOutletContext-605ea3816cfa35446be3168714a9b52f8c3244b7d7d932d869c7fa1c9b9a20b615e20ab8b844b8654294467eca8a9e95d924c7b9754919dbef083c50a45ad0ce",
            "file": "src/app/carousel/carousel/carousel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CarouselStore {\n  constructor(\n    public touch = new Touch(),\n    public vertical = new Vertical(),\n    public interval?: CarouselInterval,\n    public transform = new Transfrom(),\n    public button?: CarouselButton,\n    public visibleItems?: ItemsControl,\n    public deviceType?: DeviceType,\n    public type = 'fixed',\n    public token = '',\n    public items = 0,\n    public load = 0,\n    public deviceWidth = 0,\n    public carouselWidth = 0,\n    public itemWidth = 0,\n    public slideItems = 0,\n    public itemWidthPer = 0,\n    public itemLength = 0,\n    public currentSlide = 0,\n    public easing = 'cubic-bezier(0, 0, 0.2, 1)',\n    public speed = 200,\n    public loop = false,\n    public dexVal = 0,\n    public touchTransform = 0,\n    public isEnd = false,\n    public isFirst = true,\n    public isLast = false,\n    public RTL = false,\n    public point = true,\n    public velocity = 1,\n    public showPagination = true,\n    public showNavigation = true,\n  ) {}\n}\nexport type DeviceType = 'xs' | 'sm' | 'md' | 'lg' | 'all';\n\nexport type ButtonVisible = 'disabled' | 'hide';\n\nexport class ItemsControl {\n  start: number;\n  end: number;\n}\n\nexport class Vertical {\n  enabled: boolean;\n  height: number;\n  // numHeight?: number;\n}\n\nexport class CarouselButton {\n  visibility?: ButtonVisible;\n  elastic?: number;\n}\n\nexport class Touch {\n  active?: boolean;\n  swipe: string;\n  velocity: number;\n}\n\nexport class Transfrom {\n  constructor(public xs = 0, public sm = 0, public md = 0, public lg = 0, public all = 0) {}\n}\n\nexport class CarouselConfig {\n  grid: Transfrom;\n  slide?: number;\n  speed?: number;\n  interval?: CarouselInterval;\n  animation?: Animate;\n  point?: Point;\n  type?: string;\n  load?: number;\n  custom?: Custom;\n  loop?: boolean;\n  touch?: boolean;\n  easing?: string;\n  RTL?: boolean;\n  button?: CarouselButton;\n  vertical?: Vertical;\n  velocity?: number;\n  showNavigation?: boolean;\n  showPagination?: boolean;\n}\n\nexport type Custom = 'banner';\nexport type Animate = 'lazy';\n\nexport interface Point {\n  visible: boolean;\n  hideOnSingleSlide?: boolean;\n}\n\nexport interface Animation {\n  type?: Animate;\n  animateStyles?: AnimationStyles;\n}\n\nexport interface AnimationStyles {\n  style?: string;\n  open?: string;\n  close?: string;\n  stagger?: number;\n}\n\nexport interface CarouselInterval {\n  timing: number;\n  initialDelay?: number;\n}\n\nexport class CarouselOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 123,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "T",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "$implicit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "<p>Data for the node.</p>\n",
                    "line": 114,
                    "rawdescription": "\nData for the node."
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Length of the number of total dataNodes.</p>\n",
                    "line": 123,
                    "rawdescription": "\nLength of the number of total dataNodes."
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>Index location of the node.</p>\n",
                    "line": 120,
                    "rawdescription": "\nIndex location of the node."
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Depth of the node.</p>\n",
                    "line": 117,
                    "rawdescription": "\nDepth of the node."
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "CarouselStore",
            "id": "class-CarouselStore-605ea3816cfa35446be3168714a9b52f8c3244b7d7d932d869c7fa1c9b9a20b615e20ab8b844b8654294467eca8a9e95d924c7b9754919dbef083c50a45ad0ce",
            "file": "src/app/carousel/carousel/carousel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CarouselStore {\n  constructor(\n    public touch = new Touch(),\n    public vertical = new Vertical(),\n    public interval?: CarouselInterval,\n    public transform = new Transfrom(),\n    public button?: CarouselButton,\n    public visibleItems?: ItemsControl,\n    public deviceType?: DeviceType,\n    public type = 'fixed',\n    public token = '',\n    public items = 0,\n    public load = 0,\n    public deviceWidth = 0,\n    public carouselWidth = 0,\n    public itemWidth = 0,\n    public slideItems = 0,\n    public itemWidthPer = 0,\n    public itemLength = 0,\n    public currentSlide = 0,\n    public easing = 'cubic-bezier(0, 0, 0.2, 1)',\n    public speed = 200,\n    public loop = false,\n    public dexVal = 0,\n    public touchTransform = 0,\n    public isEnd = false,\n    public isFirst = true,\n    public isLast = false,\n    public RTL = false,\n    public point = true,\n    public velocity = 1,\n    public showPagination = true,\n    public showNavigation = true,\n  ) {}\n}\nexport type DeviceType = 'xs' | 'sm' | 'md' | 'lg' | 'all';\n\nexport type ButtonVisible = 'disabled' | 'hide';\n\nexport class ItemsControl {\n  start: number;\n  end: number;\n}\n\nexport class Vertical {\n  enabled: boolean;\n  height: number;\n  // numHeight?: number;\n}\n\nexport class CarouselButton {\n  visibility?: ButtonVisible;\n  elastic?: number;\n}\n\nexport class Touch {\n  active?: boolean;\n  swipe: string;\n  velocity: number;\n}\n\nexport class Transfrom {\n  constructor(public xs = 0, public sm = 0, public md = 0, public lg = 0, public all = 0) {}\n}\n\nexport class CarouselConfig {\n  grid: Transfrom;\n  slide?: number;\n  speed?: number;\n  interval?: CarouselInterval;\n  animation?: Animate;\n  point?: Point;\n  type?: string;\n  load?: number;\n  custom?: Custom;\n  loop?: boolean;\n  touch?: boolean;\n  easing?: string;\n  RTL?: boolean;\n  button?: CarouselButton;\n  vertical?: Vertical;\n  velocity?: number;\n  showNavigation?: boolean;\n  showPagination?: boolean;\n}\n\nexport type Custom = 'banner';\nexport type Animate = 'lazy';\n\nexport interface Point {\n  visible: boolean;\n  hideOnSingleSlide?: boolean;\n}\n\nexport interface Animation {\n  type?: Animate;\n  animateStyles?: AnimationStyles;\n}\n\nexport interface AnimationStyles {\n  style?: string;\n  open?: string;\n  close?: string;\n  stagger?: number;\n}\n\nexport interface CarouselInterval {\n  timing: number;\n  initialDelay?: number;\n}\n\nexport class CarouselOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "touch",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Touch()"
                    },
                    {
                        "name": "vertical",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Vertical()"
                    },
                    {
                        "name": "interval",
                        "type": "CarouselInterval",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "transform",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Transfrom()"
                    },
                    {
                        "name": "button",
                        "type": "CarouselButton",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "visibleItems",
                        "type": "ItemsControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "deviceType",
                        "type": "DeviceType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'fixed'"
                    },
                    {
                        "name": "token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    },
                    {
                        "name": "items",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "load",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "deviceWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "carouselWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "itemWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "slideItems",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "itemWidthPer",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "itemLength",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "currentSlide",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "easing",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'cubic-bezier(0, 0, 0.2, 1)'"
                    },
                    {
                        "name": "speed",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "200"
                    },
                    {
                        "name": "loop",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "dexVal",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "touchTransform",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "isEnd",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "isFirst",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    },
                    {
                        "name": "isLast",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "RTL",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false"
                    },
                    {
                        "name": "point",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    },
                    {
                        "name": "velocity",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "1"
                    },
                    {
                        "name": "showPagination",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    },
                    {
                        "name": "showNavigation",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true"
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "touch",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Touch()",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "vertical",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Vertical()",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "interval",
                        "type": "CarouselInterval",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "transform",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Transfrom()",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "button",
                        "type": "CarouselButton",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "visibleItems",
                        "type": "ItemsControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceType",
                        "type": "DeviceType",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'fixed'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "items",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "load",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "carouselWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "itemWidth",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "slideItems",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "itemWidthPer",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "itemLength",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentSlide",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "easing",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'cubic-bezier(0, 0, 0.2, 1)'",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "speed",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "200",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loop",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dexVal",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "touchTransform",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isEnd",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isFirst",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isLast",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "RTL",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "false",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "point",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "velocity",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "1",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "showPagination",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "showNavigation",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "true",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CarouselButton",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "carouselWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentSlide",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "deviceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceType",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "deviceWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dexVal",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "easing",
                    "defaultValue": "'cubic-bezier(0, 0, 0.2, 1)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "interval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CarouselInterval",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isEnd",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isFirst",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLast",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "itemLength",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "items",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "itemWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "itemWidthPer",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "load",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loop",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "point",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "RTL",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showNavigation",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showPagination",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "slideItems",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "speed",
                    "defaultValue": "200",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "token",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "touch",
                    "defaultValue": "new Touch()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "touchTransform",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "transform",
                    "defaultValue": "new Transfrom()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "'fixed'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "velocity",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "vertical",
                    "defaultValue": "new Vertical()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "visibleItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemsControl",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ItemsControl",
            "id": "class-ItemsControl-605ea3816cfa35446be3168714a9b52f8c3244b7d7d932d869c7fa1c9b9a20b615e20ab8b844b8654294467eca8a9e95d924c7b9754919dbef083c50a45ad0ce",
            "file": "src/app/carousel/carousel/carousel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CarouselStore {\n  constructor(\n    public touch = new Touch(),\n    public vertical = new Vertical(),\n    public interval?: CarouselInterval,\n    public transform = new Transfrom(),\n    public button?: CarouselButton,\n    public visibleItems?: ItemsControl,\n    public deviceType?: DeviceType,\n    public type = 'fixed',\n    public token = '',\n    public items = 0,\n    public load = 0,\n    public deviceWidth = 0,\n    public carouselWidth = 0,\n    public itemWidth = 0,\n    public slideItems = 0,\n    public itemWidthPer = 0,\n    public itemLength = 0,\n    public currentSlide = 0,\n    public easing = 'cubic-bezier(0, 0, 0.2, 1)',\n    public speed = 200,\n    public loop = false,\n    public dexVal = 0,\n    public touchTransform = 0,\n    public isEnd = false,\n    public isFirst = true,\n    public isLast = false,\n    public RTL = false,\n    public point = true,\n    public velocity = 1,\n    public showPagination = true,\n    public showNavigation = true,\n  ) {}\n}\nexport type DeviceType = 'xs' | 'sm' | 'md' | 'lg' | 'all';\n\nexport type ButtonVisible = 'disabled' | 'hide';\n\nexport class ItemsControl {\n  start: number;\n  end: number;\n}\n\nexport class Vertical {\n  enabled: boolean;\n  height: number;\n  // numHeight?: number;\n}\n\nexport class CarouselButton {\n  visibility?: ButtonVisible;\n  elastic?: number;\n}\n\nexport class Touch {\n  active?: boolean;\n  swipe: string;\n  velocity: number;\n}\n\nexport class Transfrom {\n  constructor(public xs = 0, public sm = 0, public md = 0, public lg = 0, public all = 0) {}\n}\n\nexport class CarouselConfig {\n  grid: Transfrom;\n  slide?: number;\n  speed?: number;\n  interval?: CarouselInterval;\n  animation?: Animate;\n  point?: Point;\n  type?: string;\n  load?: number;\n  custom?: Custom;\n  loop?: boolean;\n  touch?: boolean;\n  easing?: string;\n  RTL?: boolean;\n  button?: CarouselButton;\n  vertical?: Vertical;\n  velocity?: number;\n  showNavigation?: boolean;\n  showPagination?: boolean;\n}\n\nexport type Custom = 'banner';\nexport type Animate = 'lazy';\n\nexport interface Point {\n  visible: boolean;\n  hideOnSingleSlide?: boolean;\n}\n\nexport interface Animation {\n  type?: Animate;\n  animateStyles?: AnimationStyles;\n}\n\nexport interface AnimationStyles {\n  style?: string;\n  open?: string;\n  close?: string;\n  stagger?: number;\n}\n\nexport interface CarouselInterval {\n  timing: number;\n  initialDelay?: number;\n}\n\nexport class CarouselOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n",
            "properties": [
                {
                    "name": "end",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "start",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Touch",
            "id": "class-Touch-605ea3816cfa35446be3168714a9b52f8c3244b7d7d932d869c7fa1c9b9a20b615e20ab8b844b8654294467eca8a9e95d924c7b9754919dbef083c50a45ad0ce",
            "file": "src/app/carousel/carousel/carousel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CarouselStore {\n  constructor(\n    public touch = new Touch(),\n    public vertical = new Vertical(),\n    public interval?: CarouselInterval,\n    public transform = new Transfrom(),\n    public button?: CarouselButton,\n    public visibleItems?: ItemsControl,\n    public deviceType?: DeviceType,\n    public type = 'fixed',\n    public token = '',\n    public items = 0,\n    public load = 0,\n    public deviceWidth = 0,\n    public carouselWidth = 0,\n    public itemWidth = 0,\n    public slideItems = 0,\n    public itemWidthPer = 0,\n    public itemLength = 0,\n    public currentSlide = 0,\n    public easing = 'cubic-bezier(0, 0, 0.2, 1)',\n    public speed = 200,\n    public loop = false,\n    public dexVal = 0,\n    public touchTransform = 0,\n    public isEnd = false,\n    public isFirst = true,\n    public isLast = false,\n    public RTL = false,\n    public point = true,\n    public velocity = 1,\n    public showPagination = true,\n    public showNavigation = true,\n  ) {}\n}\nexport type DeviceType = 'xs' | 'sm' | 'md' | 'lg' | 'all';\n\nexport type ButtonVisible = 'disabled' | 'hide';\n\nexport class ItemsControl {\n  start: number;\n  end: number;\n}\n\nexport class Vertical {\n  enabled: boolean;\n  height: number;\n  // numHeight?: number;\n}\n\nexport class CarouselButton {\n  visibility?: ButtonVisible;\n  elastic?: number;\n}\n\nexport class Touch {\n  active?: boolean;\n  swipe: string;\n  velocity: number;\n}\n\nexport class Transfrom {\n  constructor(public xs = 0, public sm = 0, public md = 0, public lg = 0, public all = 0) {}\n}\n\nexport class CarouselConfig {\n  grid: Transfrom;\n  slide?: number;\n  speed?: number;\n  interval?: CarouselInterval;\n  animation?: Animate;\n  point?: Point;\n  type?: string;\n  load?: number;\n  custom?: Custom;\n  loop?: boolean;\n  touch?: boolean;\n  easing?: string;\n  RTL?: boolean;\n  button?: CarouselButton;\n  vertical?: Vertical;\n  velocity?: number;\n  showNavigation?: boolean;\n  showPagination?: boolean;\n}\n\nexport type Custom = 'banner';\nexport type Animate = 'lazy';\n\nexport interface Point {\n  visible: boolean;\n  hideOnSingleSlide?: boolean;\n}\n\nexport interface Animation {\n  type?: Animate;\n  animateStyles?: AnimationStyles;\n}\n\nexport interface AnimationStyles {\n  style?: string;\n  open?: string;\n  close?: string;\n  stagger?: number;\n}\n\nexport interface CarouselInterval {\n  timing: number;\n  initialDelay?: number;\n}\n\nexport class CarouselOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "swipe",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "velocity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Transfrom",
            "id": "class-Transfrom-605ea3816cfa35446be3168714a9b52f8c3244b7d7d932d869c7fa1c9b9a20b615e20ab8b844b8654294467eca8a9e95d924c7b9754919dbef083c50a45ad0ce",
            "file": "src/app/carousel/carousel/carousel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CarouselStore {\n  constructor(\n    public touch = new Touch(),\n    public vertical = new Vertical(),\n    public interval?: CarouselInterval,\n    public transform = new Transfrom(),\n    public button?: CarouselButton,\n    public visibleItems?: ItemsControl,\n    public deviceType?: DeviceType,\n    public type = 'fixed',\n    public token = '',\n    public items = 0,\n    public load = 0,\n    public deviceWidth = 0,\n    public carouselWidth = 0,\n    public itemWidth = 0,\n    public slideItems = 0,\n    public itemWidthPer = 0,\n    public itemLength = 0,\n    public currentSlide = 0,\n    public easing = 'cubic-bezier(0, 0, 0.2, 1)',\n    public speed = 200,\n    public loop = false,\n    public dexVal = 0,\n    public touchTransform = 0,\n    public isEnd = false,\n    public isFirst = true,\n    public isLast = false,\n    public RTL = false,\n    public point = true,\n    public velocity = 1,\n    public showPagination = true,\n    public showNavigation = true,\n  ) {}\n}\nexport type DeviceType = 'xs' | 'sm' | 'md' | 'lg' | 'all';\n\nexport type ButtonVisible = 'disabled' | 'hide';\n\nexport class ItemsControl {\n  start: number;\n  end: number;\n}\n\nexport class Vertical {\n  enabled: boolean;\n  height: number;\n  // numHeight?: number;\n}\n\nexport class CarouselButton {\n  visibility?: ButtonVisible;\n  elastic?: number;\n}\n\nexport class Touch {\n  active?: boolean;\n  swipe: string;\n  velocity: number;\n}\n\nexport class Transfrom {\n  constructor(public xs = 0, public sm = 0, public md = 0, public lg = 0, public all = 0) {}\n}\n\nexport class CarouselConfig {\n  grid: Transfrom;\n  slide?: number;\n  speed?: number;\n  interval?: CarouselInterval;\n  animation?: Animate;\n  point?: Point;\n  type?: string;\n  load?: number;\n  custom?: Custom;\n  loop?: boolean;\n  touch?: boolean;\n  easing?: string;\n  RTL?: boolean;\n  button?: CarouselButton;\n  vertical?: Vertical;\n  velocity?: number;\n  showNavigation?: boolean;\n  showPagination?: boolean;\n}\n\nexport type Custom = 'banner';\nexport type Animate = 'lazy';\n\nexport interface Point {\n  visible: boolean;\n  hideOnSingleSlide?: boolean;\n}\n\nexport interface Animation {\n  type?: Animate;\n  animateStyles?: AnimationStyles;\n}\n\nexport interface AnimationStyles {\n  style?: string;\n  open?: string;\n  close?: string;\n  stagger?: number;\n}\n\nexport interface CarouselInterval {\n  timing: number;\n  initialDelay?: number;\n}\n\nexport class CarouselOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "xs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "sm",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "md",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "lg",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    },
                    {
                        "name": "all",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0"
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "xs",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sm",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "md",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "lg",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "all",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "0",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "all",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "lg",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "md",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sm",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "xs",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Vertical",
            "id": "class-Vertical-605ea3816cfa35446be3168714a9b52f8c3244b7d7d932d869c7fa1c9b9a20b615e20ab8b844b8654294467eca8a9e95d924c7b9754919dbef083c50a45ad0ce",
            "file": "src/app/carousel/carousel/carousel.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class CarouselStore {\n  constructor(\n    public touch = new Touch(),\n    public vertical = new Vertical(),\n    public interval?: CarouselInterval,\n    public transform = new Transfrom(),\n    public button?: CarouselButton,\n    public visibleItems?: ItemsControl,\n    public deviceType?: DeviceType,\n    public type = 'fixed',\n    public token = '',\n    public items = 0,\n    public load = 0,\n    public deviceWidth = 0,\n    public carouselWidth = 0,\n    public itemWidth = 0,\n    public slideItems = 0,\n    public itemWidthPer = 0,\n    public itemLength = 0,\n    public currentSlide = 0,\n    public easing = 'cubic-bezier(0, 0, 0.2, 1)',\n    public speed = 200,\n    public loop = false,\n    public dexVal = 0,\n    public touchTransform = 0,\n    public isEnd = false,\n    public isFirst = true,\n    public isLast = false,\n    public RTL = false,\n    public point = true,\n    public velocity = 1,\n    public showPagination = true,\n    public showNavigation = true,\n  ) {}\n}\nexport type DeviceType = 'xs' | 'sm' | 'md' | 'lg' | 'all';\n\nexport type ButtonVisible = 'disabled' | 'hide';\n\nexport class ItemsControl {\n  start: number;\n  end: number;\n}\n\nexport class Vertical {\n  enabled: boolean;\n  height: number;\n  // numHeight?: number;\n}\n\nexport class CarouselButton {\n  visibility?: ButtonVisible;\n  elastic?: number;\n}\n\nexport class Touch {\n  active?: boolean;\n  swipe: string;\n  velocity: number;\n}\n\nexport class Transfrom {\n  constructor(public xs = 0, public sm = 0, public md = 0, public lg = 0, public all = 0) {}\n}\n\nexport class CarouselConfig {\n  grid: Transfrom;\n  slide?: number;\n  speed?: number;\n  interval?: CarouselInterval;\n  animation?: Animate;\n  point?: Point;\n  type?: string;\n  load?: number;\n  custom?: Custom;\n  loop?: boolean;\n  touch?: boolean;\n  easing?: string;\n  RTL?: boolean;\n  button?: CarouselButton;\n  vertical?: Vertical;\n  velocity?: number;\n  showNavigation?: boolean;\n  showPagination?: boolean;\n}\n\nexport type Custom = 'banner';\nexport type Animate = 'lazy';\n\nexport interface Point {\n  visible: boolean;\n  hideOnSingleSlide?: boolean;\n}\n\nexport interface Animation {\n  type?: Animate;\n  animateStyles?: AnimationStyles;\n}\n\nexport interface AnimationStyles {\n  style?: string;\n  open?: string;\n  close?: string;\n  stagger?: number;\n}\n\nexport interface CarouselInterval {\n  timing: number;\n  initialDelay?: number;\n}\n\nexport class CarouselOutletContext<T> {\n  /** Data for the node. */\n  $implicit: T;\n\n  /** Depth of the node. */\n  level: number;\n\n  /** Index location of the node. */\n  index?: number;\n\n  /** Length of the number of total dataNodes. */\n  count?: number;\n\n  constructor(data: T) {\n    this.$implicit = data;\n  }\n}\n",
            "properties": [
                {
                    "name": "enabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "CarouselDefDirective",
            "id": "directive-CarouselDefDirective-99252238693ab27b7a5b5299c3361329102a3e6c6fd1b5ef6b4814f8f16d553a4c1a294f6357e49e2ec8f7c33bf3ccf943c2cb97115a2e2a7f33a1082ca2b3ca",
            "file": "src/app/carousel/carousel.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[CarouselItem]'\n})\nexport class CarouselItemDirective {}\n\n@Directive({\n  selector: '[carouselDef]'\n})\nexport class CarouselDefDirective<T> {\n  when: (index: number, nodeData: T) => boolean;\n\n  constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n  selector: '[carouselOutlet]'\n})\n\nexport class CarouselOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n",
            "selector": "[carouselDef]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "when",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "CarouselItemDirective",
            "id": "directive-CarouselItemDirective-99252238693ab27b7a5b5299c3361329102a3e6c6fd1b5ef6b4814f8f16d553a4c1a294f6357e49e2ec8f7c33bf3ccf943c2cb97115a2e2a7f33a1082ca2b3ca",
            "file": "src/app/carousel/carousel.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[CarouselItem]'\n})\nexport class CarouselItemDirective {}\n\n@Directive({\n  selector: '[carouselDef]'\n})\nexport class CarouselDefDirective<T> {\n  when: (index: number, nodeData: T) => boolean;\n\n  constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n  selector: '[carouselOutlet]'\n})\n\nexport class CarouselOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n",
            "selector": "[CarouselItem]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": []
        },
        {
            "name": "CarouselOutlet",
            "id": "directive-CarouselOutlet-99252238693ab27b7a5b5299c3361329102a3e6c6fd1b5ef6b4814f8f16d553a4c1a294f6357e49e2ec8f7c33bf3ccf943c2cb97115a2e2a7f33a1082ca2b3ca",
            "file": "src/app/carousel/carousel.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[CarouselItem]'\n})\nexport class CarouselItemDirective {}\n\n@Directive({\n  selector: '[carouselDef]'\n})\nexport class CarouselDefDirective<T> {\n  when: (index: number, nodeData: T) => boolean;\n\n  constructor(public template: TemplateRef<any>) {}\n}\n\n@Directive({\n  selector: '[carouselOutlet]'\n})\n\nexport class CarouselOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n",
            "selector": "[carouselOutlet]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "viewContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "viewContainer",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-67e73c89b6e4180c762dd520637193024f617c9f5dae4216cfef453a99e1cf5d19c6d61c9ef8d7b13ed0d18100dab6710c71c04d3b79ff0bf2166644b1fb045a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'angular-v9'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'angular-v9';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\n    width: 90%;\n    margin: 20px auto;\n    border:1px solid lightgray;\n\n}",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"container\">\n  <h1>Carousel Example</h1>\n  <app-carousel-consumer></app-carousel-consumer>\n\n  <br>\n  <br>\n  <br>\n  <br>\n  <h1>Services / RX</h1>\n\n  <app-service-input></app-service-input>\n\n  <br>\n  <br>\n  <br>\n  <app-service-output></app-service-output>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "Carousel",
            "id": "component-Carousel-7f707e16bfedf1df190109da74ba6c5cf4fd108256426f0a467abb7e210e76845a83e311fd219996481cb86c5e80a7f02939dec1c2a98b4b67d5900b3a5afce9",
            "file": "src/app/carousel/carousel/carousel.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-carousel",
            "styleUrls": [
                "carousel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "carousel.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "CarouselConfig",
                    "decorators": []
                },
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "trackBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTracking function that will be used to check the differences in data changes. Used similarly\nto `ngFor` `trackBy` function. Optimize Items operations by identifying a Items based on its data\nrelative to the function to know if a Items should be added/removed/moved.\nAccepts a function that takes two parameters, `index` and `item`.\n",
                    "description": "<p>Tracking function that will be used to check the differences in data changes. Used similarly\nto <code>ngFor</code> <code>trackBy</code> function. Optimize Items operations by identifying a Items based on its data\nrelative to the function to know if a Items should be added/removed/moved.\nAccepts a function that takes two parameters, <code>index</code> and <code>item</code>.</p>\n",
                    "line": 121,
                    "type": "TrackByFunction<T>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "carouselLoad",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "EventEmitter"
                },
                {
                    "name": "onMove",
                    "defaultValue": "new EventEmitter<Carousel<T>>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_dataDiffer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IterableDiffer<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "_dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "_dataSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "_defaultNodeDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CarouselDefDirective<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_defDirec",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<CarouselDefDirective<any>>",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "CarouselDefDirective"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_intervalController$",
                    "defaultValue": "new Subject<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_nodeOutlet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CarouselOutlet",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CarouselOutlet, {static: true}"
                        }
                    ]
                },
                {
                    "name": "_trackByFn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TrackByFunction<T>",
                    "optional": false,
                    "description": "",
                    "line": 130,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "activePoint",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "arrayChanges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IterableChanges<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "carousel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "carouselCssNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "carouselInt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "carouselMain1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'carousel', {read: ElementRef, static: true}"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "directionSym",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isHovered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "itemsContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'itemsContainer', {read: ElementRef, static: true}"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "listener1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "listener2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "listener3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "listener4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "onResize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onScrolling",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "pointIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "pointNumbers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<any>",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "styleid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "touchContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'touchContainer', {read: ElementRef, static: true}"
                        }
                    ],
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "withAnim",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "button",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CarouselButton",
                    "optional": true,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "carouselWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "currentSlide",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "deviceType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DeviceType",
                    "optional": true,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "deviceWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "dexVal",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "easing",
                    "defaultValue": "'cubic-bezier(0, 0, 0.2, 1)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "interval",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CarouselInterval",
                    "optional": true,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "isEnd",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "isFirst",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "isLast",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "itemLength",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "items",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "itemWidth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "itemWidthPer",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "load",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "loop",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "point",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "RTL",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "showNavigation",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "showPagination",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "slideItems",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "speed",
                    "defaultValue": "200",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "token",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "touch",
                    "defaultValue": "new Touch()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 3,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "touchTransform",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "transform",
                    "defaultValue": "new Transfrom()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "type",
                    "defaultValue": "'fixed'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "velocity",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "vertical",
                    "defaultValue": "new Vertical()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                },
                {
                    "name": "visibleItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ItemsControl",
                    "optional": true,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "CarouselStore"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "_btnBoolean",
                    "args": [
                        {
                            "name": "first",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "last",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 684,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nboolean function for making isFirst and isLast",
                    "description": "<p>boolean function for making isFirst and isLast</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "first",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "last",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_carouselAnimator",
                    "args": [
                        {
                            "name": "direction",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "end",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "speed",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "viewContainer",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this._nodeOutlet.viewContainer"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 798,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nanimate the carousel items",
                    "description": "<p>animate the carousel items</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "direction",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "start",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "speed",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "length",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "viewContainer",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this._nodeOutlet.viewContainer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_carouselInterval",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 748,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nhandle the auto slide",
                    "description": "<p>handle the auto slide</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_carouselLoadTrigger",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 729,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nthis will trigger the carousel to load the items",
                    "description": "<p>this will trigger the carousel to load the items</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_carouselPoint",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 465,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nInit carousel point",
                    "description": "<p>Init carousel point</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_carouselPointActiver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 490,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nchange the active point in carousel",
                    "description": "<p>change the active point in carousel</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_carouselScrollOne",
                    "args": [
                        {
                            "name": "Btn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 590,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nlogic to scroll the carousel step 1",
                    "description": "<p>logic to scroll the carousel step 1</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "Btn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_carouselScrollTwo",
                    "args": [
                        {
                            "name": "Btn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentSlide",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "itemSpeed",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 646,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nlogic to scroll the carousel step 2",
                    "description": "<p>logic to scroll the carousel step 2</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "Btn",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentSlide",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemSpeed",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_carouselSize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 522,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nset the style of the carousel based the inputs data",
                    "description": "<p>set the style of the carousel based the inputs data</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_createStyleElem",
                    "args": [
                        {
                            "name": "datas",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 849,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nFor generating style tag",
                    "description": "<p>For generating style tag</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "datas",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_generateID",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 737,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\ngenerate Class for each carousel to set specific style",
                    "description": "<p>generate Class for each carousel to set specific style</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_getNodeDef",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CarouselDefDirective<any>",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_inputValidation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_observeRenderChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_onResizing",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 303,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_onWindowScrolling",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 411,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nthis fn used to disable the interval when it is not on the viewport",
                    "description": "<p>this fn used to disable the interval when it is not on the viewport</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_removeAnimations",
                    "args": [
                        {
                            "name": "indexs",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 833,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "indexs",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setStyle",
                    "args": [
                        {
                            "name": "el",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prop",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 844,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nShort form for setElementStyle",
                    "description": "<p>Short form for setElementStyle</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "el",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prop",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "val",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setTouchTransfrom",
                    "args": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "valt",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 391,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "valt",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_setTransformFromTouch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 396,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_storeCarouselData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 427,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nstore data based on width of the screen for the carousel",
                    "description": "<p>store data based on width of the screen for the carousel</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_switchDataSource",
                    "args": [
                        {
                            "name": "dataSource",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "dataSource",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_touch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 314,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGet Touch input",
                    "description": "<p>Get Touch input</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_touchHandling",
                    "args": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 370,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nhandle touch input",
                    "description": "<p>handle touch input</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ev",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_transformString",
                    "args": [
                        {
                            "name": "grid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "slide",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 689,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "grid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "slide",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_transformStyle",
                    "args": [
                        {
                            "name": "slide",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 714,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nset the transform style to scroll the carousel",
                    "description": "<p>set the transform style to scroll the carousel</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "slide",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "_updateItemIndexContext",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates the index-related context for each row to reflect any changes in the index of the rows,\ne.g. first/last/even/odd.\n",
                    "description": "<p>Updates the index-related context for each row to reflect any changes in the index of the rows,\ne.g. first/last/even/odd.</p>\n",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_updateItemIndexContextAni",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 783,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "moveTo",
                    "args": [
                        {
                            "name": "slide",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "withOutAnimation",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 497,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nthis function is used to scoll the carousel when point is clicked",
                    "description": "<p>this function is used to scoll the carousel when point is clicked</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "slide",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "withOutAnimation",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 709,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngDoCheck",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prev",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 704,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "renderNodeChanges",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "viewContainer",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this._nodeOutlet.viewContainer"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "viewContainer",
                            "type": "ViewContainerRef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this._nodeOutlet.viewContainer",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [
                        {
                            "name": "withOutAnimation",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 457,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nUsed to reset the carousel",
                    "description": "<p>Used to reset the carousel</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "withOutAnimation",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { isPlatformBrowser } from '@angular/common';\nimport * as Hammer from 'hammerjs';\n\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  isDevMode,\n  IterableChangeRecord,\n  IterableChanges,\n  IterableDiffer,\n  IterableDiffers,\n  OnDestroy,\n  OnInit,\n  Output,\n  PLATFORM_ID,\n  QueryList,\n  Renderer2,\n  TrackByFunction,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\nimport { EMPTY, fromEvent, interval, merge, Observable, of, Subject, Subscription } from 'rxjs';\nimport { mapTo, startWith, switchMap, takeUntil } from 'rxjs/operators';\nimport {\n  CarouselDefDirective,\n  CarouselOutlet,\n} from '../carousel.directive';\nimport { CarouselConfig, CarouselOutletContext, CarouselStore } from './carousel';\n\n\n\n// @dynamic\n@Component({\n  selector: 'app-carousel',\n  templateUrl: 'carousel.component.html',\n  styleUrls: ['carousel.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n// @dynamic\n// tslint:disable-next-line:component-class-suffix\nexport class Carousel<T> extends CarouselStore\n  implements OnInit, AfterContentInit, AfterViewInit, OnDestroy, DoCheck {\n  _dataSubscription: Subscription;\n  _dataSource: any;\n  _dataDiffer: IterableDiffer<{}>;\n  styleid: string;\n  private directionSym: string;\n  private carouselCssNode: any;\n  private pointIndex: number;\n  private withAnim = true;\n  activePoint: number;\n  isHovered = false;\n\n  @Input() private config: CarouselConfig;\n  @Output() private carouselLoad = new EventEmitter();\n\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() private onMove = new EventEmitter<Carousel<T>>();\n  // isFirstss = 0;\n  arrayChanges: IterableChanges<{}>;\n  carouselInt: Subscription;\n\n  listener1: () => void;\n  listener2: () => void;\n  listener3: () => void;\n  listener4: () => void;\n\n  @Input('dataSource')\n  get dataSource(): any {\n    return this._dataSource;\n  }\n  set dataSource(data: any) {\n    if (data) {\n      this._switchDataSource(data);\n    }\n  }\n\n  private _defaultNodeDef: CarouselDefDirective<any> | null;\n\n  @ContentChildren(CarouselDefDirective)\n  private _defDirec: QueryList<CarouselDefDirective<any>>;\n\n  @ViewChild(CarouselOutlet, { static: true })\n  _nodeOutlet: CarouselOutlet;\n\n  @ViewChild('carousel', { read: ElementRef, static: true })\n  private carouselMain1: ElementRef;\n\n  @ViewChild('itemsContainer', { read: ElementRef, static: true })\n  private itemsContainer: ElementRef;\n\n  @ViewChild('touchContainer', { read: ElementRef, static: true })\n  private touchContainer: ElementRef;\n\n  private _intervalController$ = new Subject<number>();\n\n  private carousel: any;\n\n  private onResize: any;\n  private onScrolling: any;\n\n  pointNumbers: Array<any> = [];\n\n  /**\n   * Tracking function that will be used to check the differences in data changes. Used similarly\n   * to `ngFor` `trackBy` function. Optimize Items operations by identifying a Items based on its data\n   * relative to the function to know if a Items should be added/removed/moved.\n   * Accepts a function that takes two parameters, `index` and `item`.\n   */\n  @Input()\n  get trackBy(): TrackByFunction<T> {\n    return this._trackByFn;\n  }\n  set trackBy(fn: TrackByFunction<T>) {\n    if (isDevMode() && fn != null && typeof fn !== 'function' && console && console.warn) {\n      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n    }\n    this._trackByFn = fn;\n  }\n  private _trackByFn: TrackByFunction<T>;\n\n  constructor(\n    private _el: ElementRef,\n    private _renderer: Renderer2,\n    private _differs: IterableDiffers,\n    @Inject(PLATFORM_ID) private platformId: object,\n    private cdr: ChangeDetectorRef\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this._dataDiffer = this._differs.find([]).create((_i: number, item: any) => {\n      return this.trackBy ? this.trackBy(item.dataIndex, item.data) : item;\n    });\n  }\n\n  ngDoCheck() {\n    this.arrayChanges = this._dataDiffer.diff(this.dataSource);\n    if (this.arrayChanges && this._defDirec) {\n      this._observeRenderChanges();\n    }\n  }\n\n  private _switchDataSource(dataSource: any): any {\n    this._dataSource = dataSource;\n    if (this._defDirec) {\n      this._observeRenderChanges();\n    }\n  }\n\n  private _observeRenderChanges() {\n    let dataStream: Observable<any[]> | undefined;\n\n    if (this._dataSource instanceof Observable) {\n      dataStream = this._dataSource;\n    } else if (Array.isArray(this._dataSource)) {\n      dataStream = of(this._dataSource);\n    }\n\n    if (dataStream) {\n      this._dataSubscription = dataStream\n        .pipe(takeUntil(this._intervalController$))\n        .subscribe(data => {\n          this.renderNodeChanges(data);\n          this.isLast = false;\n        });\n    }\n  }\n\n  private renderNodeChanges(\n    data: any[],\n    viewContainer: ViewContainerRef = this._nodeOutlet.viewContainer\n  ) {\n    if (!this.arrayChanges) return;\n\n    this.arrayChanges.forEachOperation(\n      (item: IterableChangeRecord<any>, adjustedPreviousIndex: number, currentIndex: number) => {\n        const node = this._getNodeDef(data[currentIndex], currentIndex);\n\n        if (item.previousIndex == null) {\n          const context = new CarouselOutletContext<any>(data[currentIndex]);\n          context.index = currentIndex;\n          viewContainer.createEmbeddedView(node.template, context, currentIndex);\n        } else if (currentIndex == null) {\n          viewContainer.remove(adjustedPreviousIndex);\n        } else {\n          const view = viewContainer.get(adjustedPreviousIndex);\n          viewContainer.move(view, currentIndex);\n        }\n      }\n    );\n    this._updateItemIndexContext();\n\n    if (this.carousel) {\n      this._storeCarouselData();\n    }\n  }\n\n  /**\n   * Updates the index-related context for each row to reflect any changes in the index of the rows,\n   * e.g. first/last/even/odd.\n   */\n  private _updateItemIndexContext() {\n    const viewContainer = this._nodeOutlet.viewContainer;\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n      const viewRef = viewContainer.get(renderIndex) as any;\n      const context = viewRef.context as any;\n      context.count = count;\n      context.first = renderIndex === 0;\n      context.last = renderIndex === count - 1;\n      context.even = renderIndex % 2 === 0;\n      context.odd = !context.even;\n      context.index = renderIndex;\n    }\n  }\n\n  private _getNodeDef(data: any, i: number): CarouselDefDirective<any> {\n    if (this._defDirec.length === 1) {\n      return this._defDirec.first;\n    }\n\n    const nodeDef =\n      this._defDirec.find(def => def.when && def.when(i, data)) || this._defaultNodeDef;\n\n    return nodeDef;\n  }\n\n  ngAfterViewInit() {\n    this.carousel = this._el.nativeElement;\n    this._inputValidation();\n\n    this.carouselCssNode = this._createStyleElem();\n\n    if (isPlatformBrowser(this.platformId)) {\n      this._carouselInterval();\n      if (!this.vertical.enabled) {\n        this._touch();\n      }\n      this.listener3 = this._renderer.listen('window', 'resize', event => {\n        this._onResizing(event);\n      });\n      this._onWindowScrolling();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._observeRenderChanges();\n\n    this.cdr.markForCheck();\n  }\n\n  private _inputValidation() {\n    this.type = this.config.grid.all !== 0 ? 'fixed' : 'responsive';\n    this.loop = this.config.loop || false;\n    this.config.easing = this.config.easing || 'cubic-bezier(0, 0, 0.2, 1)';\n    this.touch.active = this.config.touch || false;\n    this.RTL = this.config.RTL ? true : false;\n    this.interval = this.config.interval || null;\n    this.velocity = typeof this.config.velocity === 'number' ? this.config.velocity : this.velocity;\n\n    if (this.config.vertical && this.config.vertical.enabled) {\n      this.vertical.enabled = this.config.vertical.enabled;\n      this.vertical.height = this.config.vertical.height;\n    }\n    this.directionSym = this.RTL ? '' : '-';\n    this.point =\n      this.config.point && typeof this.config.point.visible !== 'undefined'\n        ? this.config.point.visible\n        : true;\n\n\n    this.showNavigation = this.config.showNavigation ?? this.showNavigation;\n    this.showPagination = this.config.showPagination ?? this.showPagination;\n\n    this._carouselSize();\n  }\n\n  ngOnDestroy() {\n    this.carouselInt && this.carouselInt.unsubscribe();\n    this._intervalController$.unsubscribe();\n    this.carouselLoad.complete();\n    this.onMove.complete();\n\n    /** remove listeners */\n    clearTimeout(this.onScrolling);\n    for (let i = 1; i <= 4; i++) {\n      const str = `listener${i}`;\n      this[str] && this[str]();\n    }\n  }\n\n  private _onResizing(event: any): void {\n    clearTimeout(this.onResize);\n    this.onResize = setTimeout(() => {\n      if (this.deviceWidth !== event.target.outerWidth) {\n        this._setStyle(this.itemsContainer.nativeElement, 'transition', ``);\n        this._storeCarouselData();\n      }\n    }, 500);\n  }\n\n  /** Get Touch input */\n  private _touch(): void {\n    if (this.config.touch) {\n      \n        const hammertime = new Hammer(this.touchContainer.nativeElement);\n        hammertime.get('pan').set({ direction: Hammer.DIRECTION_HORIZONTAL });\n\n        hammertime.on('panstart', (ev: any) => {\n          this.carouselWidth = this.itemsContainer.nativeElement.offsetWidth;\n          this.touchTransform = this.transform[this.deviceType];\n          this.dexVal = 0;\n          this._setStyle(this.itemsContainer.nativeElement, 'transition', '');\n        });\n        if (this.vertical.enabled) {\n          hammertime.on('panup', (ev: any) => {\n            this._touchHandling('panleft', ev);\n          });\n          hammertime.on('pandown', (ev: any) => {\n            this._touchHandling('panright', ev);\n          });\n        } else {\n          hammertime.on('panleft', (ev: any) => {\n            this._touchHandling('panleft', ev);\n          });\n          hammertime.on('panright', (ev: any) => {\n            this._touchHandling('panright', ev);\n          });\n        }\n        hammertime.on('panend pancancel', (ev: any) => {\n          if (Math.abs(ev.velocity) >= this.velocity) {\n            this.touch.velocity = ev.velocity;\n            let direc = 0;\n            if (!this.RTL) {\n              direc = this.touch.swipe === 'panright' ? 0 : 1;\n            } else {\n              direc = this.touch.swipe === 'panright' ? 1 : 0;\n            }\n            this._carouselScrollOne(direc);\n          } else {\n            this.dexVal = 0;\n            this._setStyle(\n              this.itemsContainer.nativeElement,\n              'transition',\n              'transform 324ms cubic-bezier(0, 0, 0.2, 1)'\n            );\n            this._setStyle(this.itemsContainer.nativeElement, 'transform', '');\n          }\n        });\n        hammertime.on('hammer.input', ev => {\n          // allow nested touch events to no propagate, this may have other side affects but works for now.\n          // TODO: It is probably better to check the source element of the event and only apply the handle to the correct carousel\n          ev.srcEvent.stopPropagation();\n        });\n    }\n  }\n\n  /** handle touch input */\n  private _touchHandling(e: string, ev: any): void {\n    // vertical touch events seem to cause to panstart event with an odd delta\n    // and a center of {x:0,y:0} so this will ignore them\n    if (ev.center.x === 0) {\n      return;\n    }\n\n    ev = Math.abs(this.vertical.enabled ? ev.deltaY : ev.deltaX);\n    let valt = ev - this.dexVal;\n    valt =\n      this.type === 'responsive'\n        ? (Math.abs(ev - this.dexVal) /\n          (this.vertical.enabled ? this.vertical.height : this.carouselWidth)) *\n        100\n        : valt;\n    this.dexVal = ev;\n    this.touch.swipe = e;\n    this._setTouchTransfrom(e, valt);\n    this._setTransformFromTouch();\n  }\n\n  private _setTouchTransfrom(e: string, valt: number) {\n    const condition = this.RTL ? 'panright' : 'panleft';\n    this.touchTransform = e === condition ? valt + this.touchTransform : this.touchTransform - valt;\n  }\n\n  private _setTransformFromTouch() {\n    if (this.touchTransform < 0) {\n      this.touchTransform = 0;\n    }\n    const type = this.type === 'responsive' ? '%' : 'px';\n    this._setStyle(\n      this.itemsContainer.nativeElement,\n      'transform',\n      this.vertical.enabled\n        ? `translate3d(0, ${this.directionSym}${this.touchTransform}${type}, 0)`\n        : `translate3d(${this.directionSym}${this.touchTransform}${type}, 0, 0)`\n    );\n  }\n\n  /** this fn used to disable the interval when it is not on the viewport */\n  private _onWindowScrolling(): void {\n    const top = this.carousel.offsetTop;\n    const scrollY = window.scrollY;\n    const heightt = window.innerHeight;\n    const carouselHeight = this.carousel.offsetHeight;\n    const isCarouselOnScreen =\n      top <= scrollY + heightt - carouselHeight / 4 && top + carouselHeight / 2 >= scrollY;\n\n    if (isCarouselOnScreen) {\n      this._intervalController$.next(1);\n    } else {\n      this._intervalController$.next(0);\n    }\n  }\n\n  /** store data based on width of the screen for the carousel */\n  private _storeCarouselData(): void {\n    this.deviceWidth = isPlatformBrowser(this.platformId) ? window.innerWidth : 1200;\n\n    this.carouselWidth = this.carouselMain1.nativeElement.offsetWidth;\n\n    if (this.type === 'responsive') {\n      this.deviceType =\n        this.deviceWidth >= 1200\n          ? 'lg'\n          : this.deviceWidth >= 992\n            ? 'md'\n            : this.deviceWidth >= 768\n              ? 'sm'\n              : 'xs';\n\n      this.items = this.config.grid[this.deviceType];\n      this.itemWidth = this.carouselWidth / this.items;\n    } else {\n      this.items = Math.trunc(this.carouselWidth / this.config.grid.all);\n      this.itemWidth = this.config.grid.all;\n      this.deviceType = 'all';\n    }\n\n    this.slideItems = +(this.config.slide < this.items ? this.config.slide : this.items);\n    this.load = this.config.load >= this.slideItems ? this.config.load : this.slideItems;\n    this.speed = this.config.speed && this.config.speed > -1 ? this.config.speed : 400;\n    this._carouselPoint();\n  }\n\n  /** Used to reset the carousel */\n  public reset(withOutAnimation?: boolean): void {\n    withOutAnimation && (this.withAnim = false);\n    this.carouselCssNode.innerHTML = '';\n    this.moveTo(0);\n    this._carouselPoint();\n  }\n\n  /** Init carousel point */\n  private _carouselPoint(): void {\n    const Nos = this.dataSource.length - (this.items - this.slideItems);\n    this.pointIndex = Math.ceil(Nos / this.slideItems);\n    const pointers = [];\n\n    if (this.pointIndex > 1 || !this.config.point.hideOnSingleSlide) {\n      for (let i = 0; i < this.pointIndex; i++) {\n        pointers.push(i);\n      }\n    }\n    this.pointNumbers = pointers;\n\n    this._carouselPointActiver();\n    if (this.pointIndex <= 1) {\n      this._btnBoolean(1, 1);\n    } else {\n      if (this.currentSlide === 0 && !this.loop) {\n        this._btnBoolean(1, 0);\n      } else {\n        this._btnBoolean(0, 0);\n      }\n    }\n  }\n\n  /** change the active point in carousel */\n  private _carouselPointActiver(): void {\n    const i = Math.ceil(this.currentSlide / this.slideItems);\n    this.activePoint = i;\n    this.cdr.markForCheck();\n  }\n\n  /** this function is used to scoll the carousel when point is clicked */\n  public moveTo(slide: number, withOutAnimation?: boolean) {\n    // slide = slide - 1;\n    withOutAnimation && (this.withAnim = false);\n    if (this.activePoint !== slide && slide < this.pointIndex) {\n      let slideremains;\n      const btns = this.currentSlide < slide ? 1 : 0;\n\n      switch (slide) {\n        case 0:\n          this._btnBoolean(1, 0);\n          slideremains = slide * this.slideItems;\n          break;\n        case this.pointIndex - 1:\n          this._btnBoolean(0, 1);\n          slideremains = this.dataSource.length - this.items;\n          break;\n        default:\n          this._btnBoolean(0, 0);\n          slideremains = slide * this.slideItems;\n      }\n      this._carouselScrollTwo(btns, slideremains, this.speed);\n    }\n  }\n\n  /** set the style of the carousel based the inputs data */\n  private _carouselSize(): void {\n    this.token = this._generateID();\n    let dism = '';\n    this.styleid = `.${this.token} > .carousel > .touch-container > .carousel-items`;\n\n    if (this.config.custom === 'banner') {\n      this._renderer.addClass(this.carousel, 'banner');\n    }\n\n    if (this.config.animation === 'lazy') {\n      dism += `${this.styleid} > .item {transition: transform .6s ease;}`;\n    }\n\n    let itemStyle = '';\n    if (this.vertical.enabled) {\n      const itemWidthXS = `${this.styleid} > .item {height: ${this.vertical.height /\n        +this.config.grid.xs}px}`;\n      const itemWidthSM = `${this.styleid} > .item {height: ${this.vertical.height /\n        +this.config.grid.sm}px}`;\n      const itemWidthMD = `${this.styleid} > .item {height: ${this.vertical.height /\n        +this.config.grid.md}px}`;\n      const itemWidthLG = `${this.styleid} > .item {height: ${this.vertical.height /\n        +this.config.grid.lg}px}`;\n\n      itemStyle = `@media (max-width:767px){${itemWidthXS}}\n                    @media (min-width:768px){${itemWidthSM}}\n                    @media (min-width:992px){${itemWidthMD}}\n                    @media (min-width:1200px){${itemWidthLG}}`;\n    } else if (this.type === 'responsive') {\n      const itemWidthXS =\n        this.config.type === 'mobile'\n          ? `${this.styleid} .item {flex: 0 0 ${95 / +this.config.grid.xs}%; width: ${95 /\n          +this.config.grid.xs}%;}`\n          : `${this.styleid} .item {flex: 0 0 ${100 / +this.config.grid.xs}%; width: ${100 /\n          +this.config.grid.xs}%;}`;\n\n      const itemWidthSM = `${this.styleid} > .item {flex: 0 0 ${100 /\n        +this.config.grid.sm}%; width: ${100 / +this.config.grid.sm}%}`;\n      const itemWidthMD = `${this.styleid} > .item {flex: 0 0 ${100 /\n        +this.config.grid.md}%; width: ${100 / +this.config.grid.md}%}`;\n      const itemWidthLG = `${this.styleid} > .item {flex: 0 0 ${100 /\n        +this.config.grid.lg}%; width: ${100 / +this.config.grid.lg}%}`;\n\n      itemStyle = `@media (max-width:767px){${itemWidthXS}}\n                    @media (min-width:768px){${itemWidthSM}}\n                    @media (min-width:992px){${itemWidthMD}}\n                    @media (min-width:1200px){${itemWidthLG}}`;\n    } else {\n      itemStyle = `${this.styleid} .item {flex: 0 0 ${this.config.grid.all}px; width: ${this.config.grid.all}px;}`;\n    }\n\n    this._renderer.addClass(this.carousel, this.token);\n    if (this.vertical.enabled) {\n      this._renderer.addClass(this.itemsContainer.nativeElement, 'nguvertical');\n      this._renderer.setStyle(\n        this.carouselMain1.nativeElement,\n        'height',\n        `${this.vertical.height}px`\n      );\n    }\n\n    // tslint:disable-next-line:no-unused-expression\n    this.RTL && !this.vertical.enabled && this._renderer.addClass(this.carousel, 'ngurtl');\n    this._createStyleElem(`${dism} ${itemStyle}`);\n    this._storeCarouselData();\n  }\n\n  /** logic to scroll the carousel step 1 */\n  private _carouselScrollOne(Btn: number): void {\n    let itemSpeed = this.speed;\n    let translateXval = 0;\n    let currentSlide = 0;\n    const touchMove = Math.ceil(this.dexVal / this.itemWidth);\n    this._setStyle(this.itemsContainer.nativeElement, 'transform', '');\n\n    if (this.pointIndex === 1) {\n      return;\n    } else if (Btn === 0 && ((!this.loop && !this.isFirst) || this.loop)) {\n\n      const currentSlideD = this.currentSlide - this.slideItems;\n      const MoveSlide = currentSlideD + this.slideItems;\n      this._btnBoolean(0, 1);\n      if (this.currentSlide === 0) {\n        currentSlide = this.dataSource.length - this.items;\n        itemSpeed = 400;\n        this._btnBoolean(0, 1);\n      } else if (this.slideItems >= MoveSlide) {\n        currentSlide = translateXval = 0;\n        this._btnBoolean(1, 0);\n      } else {\n        this._btnBoolean(0, 0);\n        if (touchMove > this.slideItems) {\n          currentSlide = this.currentSlide - touchMove;\n          itemSpeed = 200;\n        } else {\n          currentSlide = this.currentSlide - this.slideItems;\n        }\n      }\n      this._carouselScrollTwo(Btn, currentSlide, itemSpeed);\n    } else if (Btn === 1 && ((!this.loop && !this.isLast) || this.loop)) {\n      if (\n        this.dataSource.length <= this.currentSlide + this.items + this.slideItems &&\n        !this.isLast\n      ) {\n        currentSlide = this.dataSource.length - this.items;\n        this._btnBoolean(0, 1);\n      } else if (this.isLast) {\n        currentSlide = translateXval = 0;\n        itemSpeed = 400;\n        this._btnBoolean(1, 0);\n      } else {\n        this._btnBoolean(0, 0);\n        if (touchMove > this.slideItems) {\n          currentSlide = this.currentSlide + this.slideItems + (touchMove - this.slideItems);\n          itemSpeed = 200;\n        } else {\n          currentSlide = this.currentSlide + this.slideItems;\n        }\n      }\n      this._carouselScrollTwo(Btn, currentSlide, itemSpeed);\n    }\n  }\n\n  /** logic to scroll the carousel step 2 */\n  private _carouselScrollTwo(Btn: number, currentSlide: number, itemSpeed: number): void {\n    // tslint:disable-next-line:no-unused-expression\n\n    if (this.dexVal !== 0) {\n      const val = Math.abs(this.touch.velocity);\n      let somt = Math.floor((this.dexVal / val / this.dexVal) * (this.deviceWidth - this.dexVal));\n      somt = somt > itemSpeed ? itemSpeed : somt;\n      itemSpeed = somt < 200 ? 200 : somt;\n      this.dexVal = 0;\n    }\n    if (this.withAnim) {\n      this._setStyle(\n        this.itemsContainer.nativeElement,\n        'transition',\n        `transform ${itemSpeed}ms ${this.config.easing}`\n      );\n      this.config.animation &&\n        this._carouselAnimator(\n          Btn,\n          currentSlide + 1,\n          currentSlide + this.items,\n          itemSpeed,\n          Math.abs(this.currentSlide - currentSlide)\n        );\n    } else {\n      this._setStyle(this.itemsContainer.nativeElement, 'transition', ``);\n    }\n\n    this.itemLength = this.dataSource.length;\n    this._transformStyle(currentSlide);\n    this.currentSlide = currentSlide;\n    this.onMove.emit(this);\n    this._carouselPointActiver();\n    this._carouselLoadTrigger();\n    this.withAnim = true;\n  }\n\n  /** boolean function for making isFirst and isLast */\n  private _btnBoolean(first: number, last: number) {\n    this.isFirst = !!first;\n    this.isLast = !!last;\n  }\n\n  private _transformString(grid: string, slide: number): string {\n    let collect = '';\n    collect += `${this.styleid} { transform: translate3d(`;\n\n    if (this.vertical.enabled) {\n      this.transform[grid] = (this.vertical.height / this.config.grid[grid]) * slide;\n      collect += `0, -${this.transform[grid]}px, 0`;\n    } else {\n      this.transform[grid] = (100 / this.config.grid[grid]) * slide;\n      collect += `${this.directionSym}${this.transform[grid]}%, 0, 0`;\n    }\n    collect += `); }`;\n    return collect;\n  }\n\n  public prev() {\n    console.log(\"go back!!\");\n    this._carouselScrollOne(0);\n  }\n\n  public next() {\n    this._carouselScrollOne(1);\n  }\n\n  /** set the transform style to scroll the carousel  */\n  private _transformStyle(slide: number): void {\n    let slideCss = '';\n    if (this.type === 'responsive') {\n      slideCss = `@media (max-width: 767px) {${this._transformString('xs', slide)}}\n      @media (min-width: 768px) {${this._transformString('sm', slide)} }\n      @media (min-width: 992px) {${this._transformString('md', slide)} }\n      @media (min-width: 1200px) {${this._transformString('lg', slide)} }`;\n    } else {\n      this.transform.all = this.config.grid.all * slide;\n      slideCss = `${this.styleid} { transform: translate3d(${this.directionSym}${this.transform.all}px, 0, 0);`;\n    }\n    this.carouselCssNode.innerHTML = slideCss;\n  }\n\n  /** this will trigger the carousel to load the items */\n  private _carouselLoadTrigger(): void {\n    if (typeof this.config.load === 'number') {\n      this.dataSource.length - this.load <= this.currentSlide + this.items &&\n        this.carouselLoad.emit(this.currentSlide);\n    }\n  }\n\n  /** generate Class for each carousel to set specific style */\n  private _generateID(): string {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (let i = 0; i < 6; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return `ngucarousel${text}`;\n  }\n\n  /** handle the auto slide */\n  private _carouselInterval(): void {\n    const container = this.carouselMain1.nativeElement;\n    if (this.interval && this.loop) {\n      this.listener4 = this._renderer.listen('window', 'scroll', () => {\n        clearTimeout(this.onScrolling);\n        this.onScrolling = setTimeout(() => {\n          this._onWindowScrolling();\n        }, 600);\n      });\n\n      const play$ = fromEvent(container, 'mouseleave').pipe(mapTo(1));\n      const pause$ = fromEvent(container, 'mouseenter').pipe(mapTo(0));\n\n      const touchPlay$ = fromEvent(container, 'touchstart').pipe(mapTo(1));\n      const touchPause$ = fromEvent(container, 'touchend').pipe(mapTo(0));\n\n      const interval$ = interval(this.config.interval.timing).pipe(mapTo(1));\n\n      setTimeout(() => {\n        this.carouselInt = merge(play$, touchPlay$, pause$, touchPause$, this._intervalController$)\n          .pipe(\n            startWith(1),\n            switchMap(val => {\n              this.isHovered = !val;\n              this.cdr.markForCheck();\n              return val ? interval$ : EMPTY;\n            })\n          )\n          .subscribe(res => {\n            this._carouselScrollOne(1);\n          });\n      }, this.interval.initialDelay);\n    }\n  }\n\n  private _updateItemIndexContextAni() {\n    const viewContainer = this._nodeOutlet.viewContainer;\n    for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n      const viewRef = viewContainer.get(renderIndex) as any;\n      const context = viewRef.context as any;\n      context.count = count;\n      context.first = renderIndex === 0;\n      context.last = renderIndex === count - 1;\n      context.even = renderIndex % 2 === 0;\n      context.odd = !context.even;\n      context.index = renderIndex;\n    }\n  }\n\n  /** animate the carousel items */\n  private _carouselAnimator(\n    direction: number,\n    start: number,\n    end: number,\n    speed: number,\n    length: number,\n    viewContainer = this._nodeOutlet.viewContainer\n  ): void {\n    let val = length < 5 ? length : 5;\n    val = val === 1 ? 3 : val;\n    const collectIndex = [];\n\n    if (direction === 1) {\n      for (let i = start - 1; i < end; i++) {\n        collectIndex.push(i);\n        val = val * 2;\n        const viewRef = viewContainer.get(i) as any;\n        const context = viewRef.context as any;\n        context.animate = { value: true, params: { distance: val } };\n      }\n    } else {\n      for (let i = end - 1; i >= start - 1; i--) {\n        collectIndex.push(i);\n        val = val * 2;\n        const viewRef = viewContainer.get(i) as any;\n        const context = viewRef.context as any;\n        context.animate = { value: true, params: { distance: -val } };\n      }\n    }\n    this.cdr.markForCheck();\n    setTimeout(() => {\n      this._removeAnimations(collectIndex);\n    }, speed * 0.7);\n  }\n\n  private _removeAnimations(indexs: number[]) {\n    const viewContainer = this._nodeOutlet.viewContainer;\n    indexs.forEach(i => {\n      const viewRef = viewContainer.get(i) as any;\n      const context = viewRef.context as any;\n      context.animate = { value: false, params: { distance: 0 } };\n    });\n    this.cdr.markForCheck();\n  }\n\n  /** Short form for setElementStyle */\n  private _setStyle(el: any, prop: any, val: any): void {\n    this._renderer.setStyle(el, prop, val);\n  }\n\n  /** For generating style tag */\n  private _createStyleElem(datas?: string) {\n    const styleItem = this._renderer.createElement('style');\n    if (datas) {\n      const styleText = this._renderer.createText(datas);\n      this._renderer.appendChild(styleItem, styleText);\n    }\n    this._renderer.appendChild(this.carousel, styleItem);\n    return styleItem;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  position: relative;\n  &.ngurtl {\n    direction: rtl;\n  }\n}\n\n.carousel {\n  // height: 100%;\n  // .carousel-inner {\n  position: relative;\n  overflow: hidden;\n  height: 100%;\n  .carousel-items {\n    position: relative;\n    display: flex;\n    height: 100%;\n  } // }\n}\n\n.nguvertical {\n  flex-direction: column;\n}\n\n\n.clearFix {\n  clear: both;\n}\n\n\n// navigation styles\nbutton.nav {\n  // TODO add button reset\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n\n  &.prev {\n      left: 0;\n  }\n\n  &.next {\n      right: 0;\n  }\n}\n\n\n// pagination styles\n.pagination {\n  list-style-type: none;\n  text-align: center;\n  padding: 12px 0 0;\n  margin: 0;\n  white-space: nowrap;\n  overflow: auto;\n  box-sizing: border-box;\n\n  li {\n    display: inline-block;\n    border-radius: 50%;\n    border: 2px solid rgba(0, 0, 0, 0.55);\n    padding: 4px;\n    margin: 0 3px;\n    transition: 0.3s;\n    cursor: pointer;\n\n    &.active {\n      background: #6b6b6b;\n      transform: scale(1.2);\n      cursor: default;\n    }\n  }\n}\n",
                    "styleUrl": "carousel.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_differs",
                        "type": "IterableDiffers",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "platformId",
                        "type": "object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 130,
                "jsdoctags": [
                    {
                        "name": "_el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_differs",
                        "type": "IterableDiffers",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "platformId",
                        "type": "object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "CarouselStore",
            "implements": [
                "OnInit",
                "AfterContentInit",
                "AfterViewInit",
                "OnDestroy",
                "DoCheck"
            ],
            "accessors": {
                "dataSource": {
                    "name": "dataSource",
                    "setSignature": {
                        "name": "dataSource",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "data",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 82,
                        "jsdoctags": [
                            {
                                "name": "data",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "dataSource",
                        "type": "any",
                        "returnType": "any",
                        "line": 79
                    }
                },
                "trackBy": {
                    "name": "trackBy",
                    "setSignature": {
                        "name": "trackBy",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "fn",
                                "type": "TrackByFunction<T>",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 124,
                        "jsdoctags": [
                            {
                                "name": "fn",
                                "type": "TrackByFunction<T>",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "trackBy",
                        "type": "",
                        "returnType": "TrackByFunction<T>",
                        "line": 121,
                        "rawdescription": "\n\nTracking function that will be used to check the differences in data changes. Used similarly\nto `ngFor` `trackBy` function. Optimize Items operations by identifying a Items based on its data\nrelative to the function to know if a Items should be added/removed/moved.\nAccepts a function that takes two parameters, `index` and `item`.\n",
                        "description": "<p>Tracking function that will be used to check the differences in data changes. Used similarly\nto <code>ngFor</code> <code>trackBy</code> function. Optimize Items operations by identifying a Items based on its data\nrelative to the function to know if a Items should be added/removed/moved.\nAccepts a function that takes two parameters, <code>index</code> and <code>item</code>.</p>\n"
                    }
                }
            },
            "templateData": "<div #carousel class=\"carousel\">\n  <div #touchContainer class=\"touch-container\">\n    <div #itemsContainer class=\"carousel-items\">\n      <ng-container carouselOutlet></ng-container>\n    </div>\n  </div>\n\n  <ng-container *ngIf=\"showNavigation\">\n    <button class=\"nav prev\" (click)=\"prev()\" [disabled]=\"this.isFirst\" [ngClass]=\"{ 'disabled': this.isFirst}\">Prev</button>\n    <button class=\"nav next\" (click)=\"next()\" [disabled]=\"this.isLast\" [ngClass]=\"{ 'disabled': this.isLast}\">Next</button>\n  </ng-container>\n</div>\n<ng-container *ngIf=\"showPagination\">\n  <ul class=\"pagination\">\n    <li *ngFor=\"let i of pointNumbers; let j = index\" [class.active]=\"i==activePoint\" (click)=\"moveTo(i)\"></li>\n  </ul>\n</ng-container>"
        },
        {
            "name": "CarouselConsumerComponent",
            "id": "component-CarouselConsumerComponent-1d97cc38a636a6c5a328a931ef4ff68d83b81fbe3339de2c180204134718882fed081687ad7bfe43bbfff6c195b0f3836dc392dfc87b7d61f8ce7b47e6bfc29b",
            "file": "src/app/carousel-consumer/carousel-consumer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-carousel-consumer",
            "styleUrls": [
                "./carousel-consumer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./carousel-consumer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "carouselConfig",
                    "defaultValue": "{\n    grid: { xs: 3, sm: 4, md:5, lg: 6, all: 0 },\n    load: 3,\n    interval: {timing: 4000, initialDelay: 1000},\n    loop: false,\n    touch: true,\n    velocity: 0.2,\n    // showNavigation: false,\n    showPagination: true,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CarouselConfig",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "carouselItems",
                    "defaultValue": "[\n    { name: \"one\"},\n    { name: \"two\"},\n    { name: \"three\"},\n    { name: \"four\"},\n    { name: \"five\"},\n    { name: \"six\"},\n    { name: \"seven\"},\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "resetAnim",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "withAnim",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Component } from '@angular/core';\nimport { CarouselConfig } from '../carousel/carousel/carousel';\n\n@Component({\n  selector: 'app-carousel-consumer',\n  templateUrl: './carousel-consumer.component.html',\n  styleUrls: ['./carousel-consumer.component.scss']\n})\nexport class CarouselConsumerComponent implements AfterViewInit {\n  withAnim = true;\n  resetAnim = true;\n\n  carouselConfig: CarouselConfig = {\n    grid: { xs: 3, sm: 4, md:5, lg: 6, all: 0 },\n    load: 3,\n    interval: {timing: 4000, initialDelay: 1000},\n    loop: false,\n    touch: true,\n    velocity: 0.2,\n    // showNavigation: false,\n    showPagination: true,\n  }\n  carouselItems = [\n    { name: \"one\"},\n    { name: \"two\"},\n    { name: \"three\"},\n    { name: \"four\"},\n    { name: \"five\"},\n    { name: \"six\"},\n    { name: \"seven\"},\n  ];\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  ngAfterViewInit() {\n    this.cdr.detectChanges();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item {\n    padding: 10px;\n    box-sizing: border-box;\n  }\n  \n.tile {\n    min-height: 200px;\n    background-color: #ccc;\n    background-size: cover !important;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    box-shadow: 0 0 10px rgba(0, 0, 0, .3);\n}\n  \n  ",
                    "styleUrl": "./carousel-consumer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<app-carousel [config]=\"carouselConfig\" [dataSource]=\"carouselItems\">\n    <app-carousel-item *carouselDef=\"let item; let j = index\">\n        <div class=\"tile\">{{item.name}}</div>\n    </app-carousel-item>\n</app-carousel>\n\n"
        },
        {
            "name": "CarouselItemComponent",
            "id": "component-CarouselItemComponent-0a0bf69297feb72d1cbf136901c42a438a613e4e7f27727132450eb43fee0e4d881a18f30107b2a71536f05ee81cde5a9441470df080fbc994d9ab2dd32f58e3",
            "file": "src/app/carousel/carousel-item/carousel-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-carousel-item",
            "styleUrls": [
                "carousel-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "carousel-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "classes",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class.item'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.item",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding } from '@angular/core';\n\n@Component({\n  selector: 'app-carousel-item',\n  templateUrl: 'carousel-item.component.html',\n  styleUrls: ['carousel-item.component.scss']\n})\nexport class CarouselItemComponent {\n  @HostBinding('class.item') classes = true;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "carousel-item.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ServiceInputComponent",
            "id": "component-ServiceInputComponent-ffab5289fd7e9ad82a389f20fe360660ba57a7cce116a07a41c6e320addf837fcf7fcc2ec38c03e68c2d57f4bc4ebc749e526ca18cbf18a19e489c5e7eb2ac11",
            "file": "src/app/service-input/service-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-service-input",
            "styleUrls": [
                "./service-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./service-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { InputService } from '../input.service';\n\n@Component({\n  selector: 'app-service-input',\n  templateUrl: './service-input.component.html',\n  styleUrls: ['./service-input.component.scss']\n})\nexport class ServiceInputComponent implements OnInit {\n\n  name = \"\";\n\n  constructor(private _inputService: InputService) { }\n\n  ngOnInit(): void {\n  }\n\n  add() {\n    this._inputService.addAnimal(this.name);\n    this.name = \"\";\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./service-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_inputService",
                        "type": "InputService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_inputService",
                        "type": "InputService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>Service Input</p>\n<input type=\"text\" [(ngModel)]=\"name\">\n<button (click)=\"add()\">Add Animal</button>\n\n\n"
        },
        {
            "name": "ServiceOutputComponent",
            "id": "component-ServiceOutputComponent-e5dd888fa37749fa44399828b208cc68c5ba870147834e603746cd2e35423be6f43d30dcc0404189b51fb317dd82ddcc7efcf60784b107b94d4549e5b637462c",
            "file": "src/app/service-output/service-output.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-service-output",
            "styleUrls": [
                "./service-output.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./service-output.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "animalsComponent$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Animal, InputService } from '../input.service';\nimport {\n  // debounceTime,\n  // distinctUntilChanged,\n  map,\n  // shareReplay,\n  // takeUntil,\n  // tap,\n} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-service-output',\n  templateUrl: './service-output.component.html',\n  styleUrls: ['./service-output.component.scss']\n})\nexport class ServiceOutputComponent implements OnInit {\n\n  animalsComponent$: Observable<string[]>;\n\n  constructor(private _inputService: InputService) { }\n\n  ngOnInit(): void {\n    this.animalsComponent$ = this._inputService.getAnimals().pipe(\n      map((animals) => animals.map(animal => `${animal.id} - ${animal.type} - ${animal.country}`))\n    );\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./service-output.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_inputService",
                        "type": "InputService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "_inputService",
                        "type": "InputService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>Service output</p>\n\n<h2>Animal count is: {{ (animalsComponent$ | async)?.length  }}</h2>\n<div *ngFor=\"let animal of animalsComponent$ | async\">\n    <p>Animal String: {{animal}}</p>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-9fcc7df313879bf26f165276014d271a92c0931c7cfd69ee89d25c97276ceaf389f26f0e65b1f392e9a121970957d554a70acc1b33669c697ea2c8949de6b095",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n// import { CarouselComponent } from './carousel-bak/carousel.component';\nimport { ServiceInputComponent } from './service-input/service-input.component';\nimport { ServiceOutputComponent } from './service-output/service-output.component';\nimport { FormsModule } from '@angular/forms';\nimport { CarouselModule } from './carousel/carousel.module';\nimport { CarouselConsumerComponent } from './carousel-consumer/carousel-consumer.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    // CarouselComponent,\n    ServiceInputComponent,\n    ServiceOutputComponent,\n    CarouselConsumerComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    CarouselModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CarouselConsumerComponent"
                        },
                        {
                            "name": "ServiceInputComponent"
                        },
                        {
                            "name": "ServiceOutputComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CarouselModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-0c6cdfa1d31d5d951606231f79412e1e1ba9a95e515b56edd37db5f18787a74cb9e53e628b8cd10c7be7939fc6b1b4795d3513b1a838c2f593a3d872d9791db8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CarouselModule",
            "id": "module-CarouselModule-035e983059589825f027dd4107f6ab441858771c8e99b5c76d25d6bc7f0fd448fa4e50a635a5d19d89b4a5a37cd4f6801cdccd1689591a684fdbeddcf0a6665f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/carousel/carousel.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport {\n  CarouselDefDirective,\n  CarouselItemDirective,\n  CarouselOutlet,\n} from './carousel.directive';\nimport { Carousel } from './carousel/carousel.component';\nimport { CarouselItemComponent } from './carousel-item/carousel-item.component';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [\n    Carousel,\n    CarouselItemComponent,\n    CarouselItemDirective,\n    CarouselDefDirective,\n    CarouselOutlet\n  ],\n  declarations: [\n    Carousel,\n    CarouselItemComponent,\n    CarouselItemDirective,\n    CarouselDefDirective,\n    CarouselOutlet,\n  ]\n})\n\n// Local copy of https://github.com/uiuniversal/ngu-carousel\nexport class CarouselModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Carousel"
                        },
                        {
                            "name": "CarouselDefDirective"
                        },
                        {
                            "name": "CarouselItemComponent"
                        },
                        {
                            "name": "CarouselItemDirective"
                        },
                        {
                            "name": "CarouselOutlet"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "Carousel"
                        },
                        {
                            "name": "CarouselDefDirective"
                        },
                        {
                            "name": "CarouselItemComponent"
                        },
                        {
                            "name": "CarouselItemDirective"
                        },
                        {
                            "name": "CarouselOutlet"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "animals",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/input.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Animal[]",
                "defaultValue": "[\n  { id: 1, type: \"dog\", country: \"ca\"},\n  { id: 2, type: \"cat\", country: \"us\"},\n  { id: 3, type: \"bird\", country: \"ca\"},\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/carousel/carousel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "EXPANSION_PANEL_ANIMATION_TIMING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/carousel/carousel-animation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'225ms cubic-bezier(0.4,0.0,0.2,1)'",
                "rawdescription": "Time and timing curve for expansion panel animations.",
                "description": "<p>Time and timing curve for expansion panel animations.</p>\n"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "slider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/carousel/carousel-animation.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AnimationTriggerMetadata",
                "defaultValue": "trigger('slider', [\n  state('rtl', style({ transform: 'translate3d({{distance}}%,0,0)' }), {\n    params: { distance: '0' }\n  }),\n  state('withoutRTL', style({ transform: 'translate3d({{distance}}%,0,0)' }), {\n    params: { distance: '0' }\n  }),\n  transition('* => *', animate('200ms ease-in'))\n])",
                "rawdescription": "Animations used by the Material expansion panel.",
                "description": "<p>Animations used by the Material expansion panel.</p>\n"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/carousel/carousel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CarouselConfig>",
                "defaultValue": "(args) => {\n\n  console.log(\"template args\", args);\n  \n  return {\n    component: Carousel,\n    props: {\n      carouselConfig: {\n        grid: { xs: 3, sm: 4, md:5, lg: 6, all: 0 },\n        load: 3,\n        interval: {timing: 4000, initialDelay: 1000},\n        loop: false,\n        touch: true,\n        velocity: 0.2,\n        ...args,\n      },\n      carouselItems: [\n          { name: \"one\"},\n          { name: \"two\"},\n          { name: \"three\"},\n          { name: \"four\"},\n          { name: \"five\"},\n          { name: \"six\"},\n          { name: \"seven\"},\n      ],\n\n    },\n    template: `<app-carousel [inputs]=\"carouselConfig\" [dataSource]=\"carouselItems\">\n        <app-carousel-item *carouselDef=\"let item; let j = index\">\n            <div [style]=\"'height: 200px; background-color: lightgrey; margin: 0 10px'\">{{item.name}}</div>\n        </app-carousel-item>\n    </app-carousel>`,\n\n  }\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Animate",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/carousel/carousel/carousel.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 195
            },
            {
                "name": "ButtonVisible",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"disabled\" | \"hide\"",
                "file": "src/app/carousel/carousel/carousel.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Custom",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/carousel/carousel/carousel.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 195
            },
            {
                "name": "DeviceType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"all\"",
                "file": "src/app/carousel/carousel/carousel.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/input.service.ts": [
                {
                    "name": "animals",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/input.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Animal[]",
                    "defaultValue": "[\n  { id: 1, type: \"dog\", country: \"ca\"},\n  { id: 2, type: \"cat\", country: \"us\"},\n  { id: 3, type: \"bird\", country: \"ca\"},\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/carousel/carousel.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/carousel/carousel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/carousel/carousel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CarouselConfig>",
                    "defaultValue": "(args) => {\n\n  console.log(\"template args\", args);\n  \n  return {\n    component: Carousel,\n    props: {\n      carouselConfig: {\n        grid: { xs: 3, sm: 4, md:5, lg: 6, all: 0 },\n        load: 3,\n        interval: {timing: 4000, initialDelay: 1000},\n        loop: false,\n        touch: true,\n        velocity: 0.2,\n        ...args,\n      },\n      carouselItems: [\n          { name: \"one\"},\n          { name: \"two\"},\n          { name: \"three\"},\n          { name: \"four\"},\n          { name: \"five\"},\n          { name: \"six\"},\n          { name: \"seven\"},\n      ],\n\n    },\n    template: `<app-carousel [inputs]=\"carouselConfig\" [dataSource]=\"carouselItems\">\n        <app-carousel-item *carouselDef=\"let item; let j = index\">\n            <div [style]=\"'height: 200px; background-color: lightgrey; margin: 0 10px'\">{{item.name}}</div>\n        </app-carousel-item>\n    </app-carousel>`,\n\n  }\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/app/carousel/carousel-animation.ts": [
                {
                    "name": "EXPANSION_PANEL_ANIMATION_TIMING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/carousel/carousel-animation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'225ms cubic-bezier(0.4,0.0,0.2,1)'",
                    "rawdescription": "Time and timing curve for expansion panel animations.",
                    "description": "<p>Time and timing curve for expansion panel animations.</p>\n"
                },
                {
                    "name": "slider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/carousel/carousel-animation.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AnimationTriggerMetadata",
                    "defaultValue": "trigger('slider', [\n  state('rtl', style({ transform: 'translate3d({{distance}}%,0,0)' }), {\n    params: { distance: '0' }\n  }),\n  state('withoutRTL', style({ transform: 'translate3d({{distance}}%,0,0)' }), {\n    params: { distance: '0' }\n  }),\n  transition('* => *', animate('200ms ease-in'))\n])",
                    "rawdescription": "Animations used by the Material expansion panel.",
                    "description": "<p>Animations used by the Material expansion panel.</p>\n"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/carousel/carousel/carousel.ts": [
                {
                    "name": "Animate",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/carousel/carousel/carousel.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 195
                },
                {
                    "name": "ButtonVisible",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"disabled\" | \"hide\"",
                    "file": "src/app/carousel/carousel/carousel.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "Custom",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/carousel/carousel/carousel.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 195
                },
                {
                    "name": "DeviceType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"xs\" | \"sm\" | \"md\" | \"lg\" | \"all\"",
                    "file": "src/app/carousel/carousel/carousel.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 7,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel-consumer/carousel-consumer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarouselConsumerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel-animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXPANSION_PANEL_ANIMATION_TIMING",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/carousel/carousel-animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "slider",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/carousel/carousel-item/carousel-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CarouselItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CarouselDefDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CarouselItemDirective",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "CarouselOutlet",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel/carousel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Carousel",
                "coveragePercent": 20,
                "coverageCount": "21/104",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel/carousel.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CarouselButton",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel/carousel.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CarouselConfig",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel/carousel.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CarouselOutletContext",
                "coveragePercent": 66,
                "coverageCount": "4/6",
                "status": "good"
            },
            {
                "filePath": "src/app/carousel/carousel/carousel.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CarouselStore",
                "coveragePercent": 0,
                "coverageCount": "0/33",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel/carousel.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ItemsControl",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel/carousel.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Touch",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel/carousel.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Transfrom",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel/carousel.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Vertical",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel/carousel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Animation",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel/carousel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AnimationStyles",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel/carousel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CarouselInterval",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/carousel/carousel/carousel.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Point",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/input.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "InputService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/input.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Animal",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/input.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "animals",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service-input/service-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServiceInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/service-output/service-output.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ServiceOutputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}